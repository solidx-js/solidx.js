import{_ as e,o as s,c as i,e as n}from"./app-fBKvO6Dl.js";const a={},c=n(`<h1 id="四元数" tabindex="-1"><a class="header-anchor" href="#四元数" aria-hidden="true">#</a> 四元数</h1><p>四元数是一种扩展了复数的数学概念，由一个实数和三个虚数（或称为纯四元数）组成，通常表示为 <code>q = a + bi + cj + dk</code>，其中 a, b, c, d 是实数，i, j, k 是虚数单位，且满足 <code>i² = j² = k² = ijk = -1</code> 的关系。</p><p>四元数在许多领域都有应用，特别是在描述三维空间的旋转时，四元数具有许多优点。与欧拉角和旋转矩阵相比，四元数更加紧凑，不会受到万向锁问题的影响，且可以很容易地进行插值。因此，四元数在计算机图形学和机器人学中被广泛使用。</p><p>四元数的运算包括加法、减法、乘法和除法，但需要注意的是，四元数的乘法不满足交换律。此外，四元数还有一种重要的运算，叫做共轭，四元数的共轭是将虚部取反得到的，用于计算四元数的模和逆。</p><p>四元数（q）和欧拉角（φ，θ，ψ）之间的转换可以通过以下数学公式表示。</p><p>欧拉角转四元数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>q.w = cos(φ/2) * cos(θ/2) * cos(ψ/2) + sin(φ/2) * sin(θ/2) * sin(ψ/2)
q.x = sin(φ/2) * cos(θ/2) * cos(ψ/2) - cos(φ/2) * sin(θ/2) * sin(ψ/2)
q.y = cos(φ/2) * sin(θ/2) * cos(ψ/2) + sin(φ/2) * cos(θ/2) * sin(ψ/2)
q.z = cos(φ/2) * cos(θ/2) * sin(ψ/2) - sin(φ/2) * sin(θ/2) * cos(ψ/2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>四元数转欧拉角：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>φ = atan2(2*(q.w*q.x + q.y*q.z), 1 - 2*(q.x*q.x + q.y*q.y))
θ = asin(2*(q.w*q.y - q.z*q.x))
ψ = atan2(2*(q.w*q.z + q.x*q.y), 1 - 2*(q.y*q.y + q.z*q.z))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，φ、θ、ψ 分别代表绕 x、y、z 轴的旋转角度，单位是弧度。q.w、q.x、q.y、q.z 分别代表四元数的实部和虚部。注意，这些公式假设了四元数已经被归一化。</p>`,10),d=[c];function t(o,l){return s(),i("div",null,d)}const q=e(a,[["render",t],["__file","四元数.html.vue"]]);export{q as default};
