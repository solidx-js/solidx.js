import{_ as a,r as d,o as r,c as i,a as t,b as o,w as n,d as e,e as s}from"./app-fBKvO6Dl.js";const c={},h=s('<h1 id="class-plane" tabindex="-1"><a class="header-anchor" href="#class-plane" aria-hidden="true">#</a> Class: Plane</h1><p>Represents a plane by the equation ax + by + cz + d = 0</p><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h3>',4),u=t("h3",{id:"properties",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),e(" Properties")],-1),_=t("h3",{id:"methods",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),e(" Methods")],-1),p=t("h2",{id:"constructors-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#constructors-1","aria-hidden":"true"},"#"),e(" Constructors")],-1),f=t("h3",{id:"constructor",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#constructor","aria-hidden":"true"},"#"),e(" constructor")],-1),m=t("strong",null,"new Plane",-1),g=t("code",null,"a",-1),x=t("code",null,"b",-1),y=t("code",null,"c",-1),b=t("code",null,"d",-1),P=t("code",null,"Plane",-1),V=s('<p>Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>a</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">a component of the plane</td></tr><tr><td style="text-align:left;"><code>b</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">b component of the plane</td></tr><tr><td style="text-align:left;"><code>c</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">c component of the plane</td></tr><tr><td style="text-align:left;"><code>d</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">d component of the plane</td></tr></tbody></table><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4>',4),D=t("code",null,"Plane",-1),T=s('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="d" tabindex="-1"><a class="header-anchor" href="#d" aria-hidden="true">#</a> d</h3><p>• <strong>d</strong>: <code>number</code></p><p>d component of the plane</p><hr><h3 id="normal" tabindex="-1"><a class="header-anchor" href="#normal" aria-hidden="true">#</a> normal</h3>',6),N=t("strong",null,"normal",-1),F=t("code",null,"Vector3",-1),C=s('<p>Normal of the plane (a,b,c)</p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="asarray" tabindex="-1"><a class="header-anchor" href="#asarray" aria-hidden="true">#</a> asArray</h3><p>▸ <strong>asArray</strong>(): <code>number</code>[]</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code>number</code>[]</p><p>the plane coordinates as a new array of 4 elements [a, b, c, d].</p><hr><h3 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> clone</h3>',9),R=t("strong",null,"clone",-1),j=t("code",null,"Plane",-1),v=t("h4",{id:"returns-2",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-2","aria-hidden":"true"},"#"),e(" Returns")],-1),A=t("code",null,"Plane",-1),I=t("p",null,"a new plane copied from the current Plane.",-1),O=t("hr",null,null,-1),w=t("h3",{id:"copyfrompoints",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#copyfrompoints","aria-hidden":"true"},"#"),e(" copyFromPoints")],-1),z=t("strong",null,"copyFromPoints",-1),k=t("code",null,"point1",-1),q=t("code",null,"point2",-1),M=t("code",null,"point3",-1),S=t("code",null,"Plane",-1),B=t("p",null,"Updates the current Plane from the plane defined by the three given points.",-1),H=t("h4",{id:"parameters-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-1","aria-hidden":"true"},"#"),e(" Parameters")],-1),L=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),U=t("td",{style:{"text-align":"left"}},[t("code",null,"point1")],-1),E={style:{"text-align":"left"}},G=t("code",null,"DeepImmutableObject",-1),J=t("code",null,"Vector3",-1),K=t("td",{style:{"text-align":"left"}},"one of the points used to construct the plane",-1),Q=t("td",{style:{"text-align":"left"}},[t("code",null,"point2")],-1),W={style:{"text-align":"left"}},X=t("code",null,"DeepImmutableObject",-1),Y=t("code",null,"Vector3",-1),Z=t("td",{style:{"text-align":"left"}},"one of the points used to construct the plane",-1),$=t("td",{style:{"text-align":"left"}},[t("code",null,"point3")],-1),tt={style:{"text-align":"left"}},et=t("code",null,"DeepImmutableObject",-1),lt=t("code",null,"Vector3",-1),ot=t("td",{style:{"text-align":"left"}},"one of the points used to construct the plane",-1),nt=t("h4",{id:"returns-3",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-3","aria-hidden":"true"},"#"),e(" Returns")],-1),st=t("code",null,"Plane",-1),at=s('<p>the updated Plane.</p><hr><h3 id="dotcoordinate" tabindex="-1"><a class="header-anchor" href="#dotcoordinate" aria-hidden="true">#</a> dotCoordinate</h3><p>▸ <strong>dotCoordinate</strong>(<code>point</code>): <code>number</code></p><p>Compute the dot product between the point and the plane normal</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4>',6),dt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),rt=t("td",{style:{"text-align":"left"}},[t("code",null,"point")],-1),it={style:{"text-align":"left"}},ct=t("code",null,"DeepImmutableObject",-1),ht=t("code",null,"Vector3",-1),ut=t("td",{style:{"text-align":"left"}},"point to calculate the dot product with",-1),_t=s('<h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>the dot product (float) of the point coordinates and the plane normal.</p><hr><h3 id="getclassname" tabindex="-1"><a class="header-anchor" href="#getclassname" aria-hidden="true">#</a> getClassName</h3><p>▸ <strong>getClassName</strong>(): <code>string</code></p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code>string</code></p><p>the string &quot;Plane&quot;.</p><hr><h3 id="gethashcode" tabindex="-1"><a class="header-anchor" href="#gethashcode" aria-hidden="true">#</a> getHashCode</h3><p>▸ <strong>getHashCode</strong>(): <code>number</code></p><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>the Plane hash code.</p><hr><h3 id="isfrontfacingto" tabindex="-1"><a class="header-anchor" href="#isfrontfacingto" aria-hidden="true">#</a> isFrontFacingTo</h3><p>▸ <strong>isFrontFacingTo</strong>(<code>direction</code>, <code>epsilon</code>): <code>boolean</code></p><p>Checks if the plane is facing a given direction (meaning if the plane&#39;s normal is pointing in the opposite direction of the given vector). Note that for this function to work as expected you should make sure that:</p><ul><li>direction and the plane normal are normalized</li><li>epsilon is a number just bigger than -1, something like -0.99 for eg</li></ul><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4>',21),pt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),ft=t("td",{style:{"text-align":"left"}},[t("code",null,"direction")],-1),mt={style:{"text-align":"left"}},gt=t("code",null,"DeepImmutableObject",-1),xt=t("code",null,"Vector3",-1),yt=t("td",{style:{"text-align":"left"}},"the direction to check if the plane is facing",-1),bt=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"epsilon")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"value the dot product is compared against (returns true if dot <= epsilon)")],-1),Pt=t("h4",{id:"returns-7",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-7","aria-hidden":"true"},"#"),e(" Returns")],-1),Vt=t("p",null,[t("code",null,"boolean")],-1),Dt=t("p",null,"True if the plane is facing the given direction",-1),Tt=t("hr",null,null,-1),Nt=t("h3",{id:"normalize",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#normalize","aria-hidden":"true"},"#"),e(" normalize")],-1),Ft=t("strong",null,"normalize",-1),Ct=t("code",null,"Plane",-1),Rt=t("p",null,"Normalize the current Plane in place.",-1),jt=t("h4",{id:"returns-8",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-8","aria-hidden":"true"},"#"),e(" Returns")],-1),vt=t("code",null,"Plane",-1),At=s('<p>the updated Plane.</p><hr><h3 id="signeddistanceto" tabindex="-1"><a class="header-anchor" href="#signeddistanceto" aria-hidden="true">#</a> signedDistanceTo</h3><p>▸ <strong>signedDistanceTo</strong>(<code>point</code>): <code>number</code></p><p>Calculates the distance to a point</p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4>',6),It=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Ot=t("td",{style:{"text-align":"left"}},[t("code",null,"point")],-1),wt={style:{"text-align":"left"}},zt=t("code",null,"DeepImmutableObject",-1),kt=t("code",null,"Vector3",-1),qt=t("td",{style:{"text-align":"left"}},"point to calculate distance to",-1),Mt=t("h4",{id:"returns-9",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-9","aria-hidden":"true"},"#"),e(" Returns")],-1),St=t("p",null,[t("code",null,"number")],-1),Bt=t("p",null,"the signed distance (float) from the given point to the Plane.",-1),Ht=t("hr",null,null,-1),Lt=t("h3",{id:"transform",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#transform","aria-hidden":"true"},"#"),e(" transform")],-1),Ut=t("strong",null,"transform",-1),Et=t("code",null,"transformation",-1),Gt=t("code",null,"Plane",-1),Jt=t("p",null,"Applies a transformation the plane and returns the result",-1),Kt=t("h4",{id:"parameters-5",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-5","aria-hidden":"true"},"#"),e(" Parameters")],-1),Qt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Wt=t("td",{style:{"text-align":"left"}},[t("code",null,"transformation")],-1),Xt={style:{"text-align":"left"}},Yt=t("code",null,"DeepImmutableObject",-1),Zt=t("code",null,"Matrix",-1),$t=t("td",{style:{"text-align":"left"}},"the transformation matrix to be applied to the plane",-1),te=t("h4",{id:"returns-10",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-10","aria-hidden":"true"},"#"),e(" Returns")],-1),ee=t("code",null,"Plane",-1),le=t("p",null,"a new Plane as the result of the transformation of the current Plane by the given matrix.",-1),oe=t("hr",null,null,-1),ne=t("h3",{id:"fromarray",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#fromarray","aria-hidden":"true"},"#"),e(" FromArray")],-1),se=t("strong",null,"FromArray",-1),ae=t("code",null,"array",-1),de=t("code",null,"Plane",-1),re=s('<p>Creates a plane from an array</p><h4 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>array</code></td><td style="text-align:left;"><code>DeepImmutableObject</code>&lt;<code>ArrayLike</code>&lt;<code>number</code>&gt;&gt;</td><td style="text-align:left;">the array to create a plane from</td></tr></tbody></table><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4>',4),ie=t("code",null,"Plane",-1),ce=t("p",null,"a new Plane from the given array.",-1),he=t("hr",null,null,-1),ue=t("h3",{id:"frompoints",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#frompoints","aria-hidden":"true"},"#"),e(" FromPoints")],-1),_e=t("strong",null,"FromPoints",-1),pe=t("code",null,"point1",-1),fe=t("code",null,"point2",-1),me=t("code",null,"point3",-1),ge=t("code",null,"Plane",-1),xe=t("p",null,"Creates a plane from three points",-1),ye=t("h4",{id:"parameters-7",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-7","aria-hidden":"true"},"#"),e(" Parameters")],-1),be=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Pe=t("td",{style:{"text-align":"left"}},[t("code",null,"point1")],-1),Ve={style:{"text-align":"left"}},De=t("code",null,"DeepImmutableObject",-1),Te=t("code",null,"Vector3",-1),Ne=t("td",{style:{"text-align":"left"}},"point used to create the plane",-1),Fe=t("td",{style:{"text-align":"left"}},[t("code",null,"point2")],-1),Ce={style:{"text-align":"left"}},Re=t("code",null,"DeepImmutableObject",-1),je=t("code",null,"Vector3",-1),ve=t("td",{style:{"text-align":"left"}},"point used to create the plane",-1),Ae=t("td",{style:{"text-align":"left"}},[t("code",null,"point3")],-1),Ie={style:{"text-align":"left"}},Oe=t("code",null,"DeepImmutableObject",-1),we=t("code",null,"Vector3",-1),ze=t("td",{style:{"text-align":"left"}},"point used to create the plane",-1),ke=t("h4",{id:"returns-12",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-12","aria-hidden":"true"},"#"),e(" Returns")],-1),qe=t("code",null,"Plane",-1),Me=t("p",null,"a new Plane defined by the three given points.",-1),Se=t("hr",null,null,-1),Be=t("h3",{id:"frompositionandnormal",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#frompositionandnormal","aria-hidden":"true"},"#"),e(" FromPositionAndNormal")],-1),He=t("strong",null,"FromPositionAndNormal",-1),Le=t("code",null,"origin",-1),Ue=t("code",null,"normal",-1),Ee=t("code",null,"Plane",-1),Ge=t("p",null,"Creates a plane from an origin point and a normal",-1),Je=t("h4",{id:"parameters-8",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-8","aria-hidden":"true"},"#"),e(" Parameters")],-1),Ke=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Qe=t("td",{style:{"text-align":"left"}},[t("code",null,"origin")],-1),We={style:{"text-align":"left"}},Xe=t("code",null,"DeepImmutableObject",-1),Ye=t("code",null,"Vector3",-1),Ze=t("td",{style:{"text-align":"left"}},"origin of the plane to be constructed",-1),$e=t("td",{style:{"text-align":"left"}},[t("code",null,"normal")],-1),tl={style:{"text-align":"left"}},el=t("code",null,"Vector3",-1),ll=t("td",{style:{"text-align":"left"}},"normal of the plane to be constructed",-1),ol=t("h4",{id:"returns-13",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-13","aria-hidden":"true"},"#"),e(" Returns")],-1),nl=t("code",null,"Plane",-1),sl=s('<p>a new Plane the normal vector to this plane at the given origin point.</p><hr><h3 id="frompositionandnormaltoref" tabindex="-1"><a class="header-anchor" href="#frompositionandnormaltoref" aria-hidden="true">#</a> FromPositionAndNormalToRef</h3><p>▸ <strong>FromPositionAndNormalToRef</strong>&lt;<code>T</code>&gt;(<code>origin</code>, <code>normal</code>, <code>result</code>): <code>T</code></p><p>Updates the given Plane &quot;result&quot; from an origin point and a normal.</p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4>',6),al=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),dl=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),rl={style:{"text-align":"left"}},il=t("code",null,"Plane",-1),cl=t("h4",{id:"parameters-9",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-9","aria-hidden":"true"},"#"),e(" Parameters")],-1),hl=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),ul=t("td",{style:{"text-align":"left"}},[t("code",null,"origin")],-1),_l={style:{"text-align":"left"}},pl=t("code",null,"DeepImmutableObject",-1),fl=t("code",null,"Vector3",-1),ml=t("td",{style:{"text-align":"left"}},"origin of the plane to be constructed",-1),gl=t("td",{style:{"text-align":"left"}},[t("code",null,"normal")],-1),xl={style:{"text-align":"left"}},yl=t("code",null,"DeepImmutableObject",-1),bl=t("code",null,"Vector3",-1),Pl=t("td",{style:{"text-align":"left"}},"the normalized normals of the plane to be constructed",-1),Vl=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"defines the Plane where to store the result")],-1),Dl=s('<h4 id="returns-14" tabindex="-1"><a class="header-anchor" href="#returns-14" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>result input</p><hr><h3 id="signeddistancetoplanefrompositionandnormal" tabindex="-1"><a class="header-anchor" href="#signeddistancetoplanefrompositionandnormal" aria-hidden="true">#</a> SignedDistanceToPlaneFromPositionAndNormal</h3><p>▸ <strong>SignedDistanceToPlaneFromPositionAndNormal</strong>(<code>origin</code>, <code>normal</code>, <code>point</code>): <code>number</code></p><p>Calculates the distance from a plane and a point</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4>',8),Tl=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Nl=t("td",{style:{"text-align":"left"}},[t("code",null,"origin")],-1),Fl={style:{"text-align":"left"}},Cl=t("code",null,"DeepImmutableObject",-1),Rl=t("code",null,"Vector3",-1),jl=t("td",{style:{"text-align":"left"}},"origin of the plane to be constructed",-1),vl=t("td",{style:{"text-align":"left"}},[t("code",null,"normal")],-1),Al={style:{"text-align":"left"}},Il=t("code",null,"DeepImmutableObject",-1),Ol=t("code",null,"Vector3",-1),wl=t("td",{style:{"text-align":"left"}},"normal of the plane to be constructed",-1),zl=t("td",{style:{"text-align":"left"}},[t("code",null,"point")],-1),kl={style:{"text-align":"left"}},ql=t("code",null,"DeepImmutableObject",-1),Ml=t("code",null,"Vector3",-1),Sl=t("td",{style:{"text-align":"left"}},"point to calculate distance to",-1),Bl=t("h4",{id:"returns-15",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-15","aria-hidden":"true"},"#"),e(" Returns")],-1),Hl=t("p",null,[t("code",null,"number")],-1),Ll=t("p",null,'the signed distance between the plane defined by the normal vector at the "origin"" point and the given other point.',-1);function Ul(El,Gl){const l=d("RouterLink");return r(),i("div",null,[h,t("ul",null,[t("li",null,[o(l,{to:"/docs/classes/Plane.html#constructor"},{default:n(()=>[e("constructor")]),_:1})])]),u,t("ul",null,[t("li",null,[o(l,{to:"/docs/classes/Plane.html#d"},{default:n(()=>[e("d")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#normal"},{default:n(()=>[e("normal")]),_:1})])]),_,t("ul",null,[t("li",null,[o(l,{to:"/docs/classes/Plane.html#asarray"},{default:n(()=>[e("asArray")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#clone"},{default:n(()=>[e("clone")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#copyfrompoints"},{default:n(()=>[e("copyFromPoints")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#dotcoordinate"},{default:n(()=>[e("dotCoordinate")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#getclassname"},{default:n(()=>[e("getClassName")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#gethashcode"},{default:n(()=>[e("getHashCode")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#isfrontfacingto"},{default:n(()=>[e("isFrontFacingTo")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#normalize"},{default:n(()=>[e("normalize")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#signeddistanceto"},{default:n(()=>[e("signedDistanceTo")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#transform"},{default:n(()=>[e("transform")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#fromarray"},{default:n(()=>[e("FromArray")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#frompoints"},{default:n(()=>[e("FromPoints")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#frompositionandnormal"},{default:n(()=>[e("FromPositionAndNormal")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#frompositionandnormaltoref"},{default:n(()=>[e("FromPositionAndNormalToRef")]),_:1})]),t("li",null,[o(l,{to:"/docs/classes/Plane.html#signeddistancetoplanefrompositionandnormal"},{default:n(()=>[e("SignedDistanceToPlaneFromPositionAndNormal")]),_:1})])]),p,f,t("p",null,[e("• "),m,e("("),g,e(", "),x,e(", "),y,e(", "),b,e("): "),o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[P]),_:1})]),V,t("p",null,[o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[D]),_:1})]),T,t("p",null,[e("• "),N,e(": "),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[F]),_:1})]),C,t("p",null,[e("▸ "),R,e("(): "),o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[j]),_:1})]),v,t("p",null,[o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[A]),_:1})]),I,O,w,t("p",null,[e("▸ "),z,e("("),k,e(", "),q,e(", "),M,e("): "),o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[S]),_:1})]),B,H,t("table",null,[L,t("tbody",null,[t("tr",null,[U,t("td",E,[G,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[J]),_:1}),e(">")]),K]),t("tr",null,[Q,t("td",W,[X,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[Y]),_:1}),e(">")]),Z]),t("tr",null,[$,t("td",tt,[et,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[lt]),_:1}),e(">")]),ot])])]),nt,t("p",null,[o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[st]),_:1})]),at,t("table",null,[dt,t("tbody",null,[t("tr",null,[rt,t("td",it,[ct,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[ht]),_:1}),e(">")]),ut])])]),_t,t("table",null,[pt,t("tbody",null,[t("tr",null,[ft,t("td",mt,[gt,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[xt]),_:1}),e(">")]),yt]),bt])]),Pt,Vt,Dt,Tt,Nt,t("p",null,[e("▸ "),Ft,e("(): "),o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[Ct]),_:1})]),Rt,jt,t("p",null,[o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[vt]),_:1})]),At,t("table",null,[It,t("tbody",null,[t("tr",null,[Ot,t("td",wt,[zt,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[kt]),_:1}),e(">")]),qt])])]),Mt,St,Bt,Ht,Lt,t("p",null,[e("▸ "),Ut,e("("),Et,e("): "),o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[Gt]),_:1})]),Jt,Kt,t("table",null,[Qt,t("tbody",null,[t("tr",null,[Wt,t("td",Xt,[Yt,e("<"),o(l,{to:"/docs/classes/Matrix.html"},{default:n(()=>[Zt]),_:1}),e(">")]),$t])])]),te,t("p",null,[o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[ee]),_:1})]),le,oe,ne,t("p",null,[e("▸ "),se,e("("),ae,e("): "),o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[de]),_:1})]),re,t("p",null,[o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[ie]),_:1})]),ce,he,ue,t("p",null,[e("▸ "),_e,e("("),pe,e(", "),fe,e(", "),me,e("): "),o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[ge]),_:1})]),xe,ye,t("table",null,[be,t("tbody",null,[t("tr",null,[Pe,t("td",Ve,[De,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[Te]),_:1}),e(">")]),Ne]),t("tr",null,[Fe,t("td",Ce,[Re,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[je]),_:1}),e(">")]),ve]),t("tr",null,[Ae,t("td",Ie,[Oe,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[we]),_:1}),e(">")]),ze])])]),ke,t("p",null,[o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[qe]),_:1})]),Me,Se,Be,t("p",null,[e("▸ "),He,e("("),Le,e(", "),Ue,e("): "),o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[Ee]),_:1})]),Ge,Je,t("table",null,[Ke,t("tbody",null,[t("tr",null,[Qe,t("td",We,[Xe,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[Ye]),_:1}),e(">")]),Ze]),t("tr",null,[$e,t("td",tl,[o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[el]),_:1})]),ll])])]),ol,t("p",null,[o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[nl]),_:1})]),sl,t("table",null,[al,t("tbody",null,[t("tr",null,[dl,t("td",rl,[e("extends "),o(l,{to:"/docs/classes/Plane.html"},{default:n(()=>[il]),_:1})])])])]),cl,t("table",null,[hl,t("tbody",null,[t("tr",null,[ul,t("td",_l,[pl,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[fl]),_:1}),e(">")]),ml]),t("tr",null,[gl,t("td",xl,[yl,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[bl]),_:1}),e(">")]),Pl]),Vl])]),Dl,t("table",null,[Tl,t("tbody",null,[t("tr",null,[Nl,t("td",Fl,[Cl,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[Rl]),_:1}),e(">")]),jl]),t("tr",null,[vl,t("td",Al,[Il,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[Ol]),_:1}),e(">")]),wl]),t("tr",null,[zl,t("td",kl,[ql,e("<"),o(l,{to:"/docs/classes/Vector3.html"},{default:n(()=>[Ml]),_:1}),e(">")]),Sl])])]),Bl,Hl,Ll])}const Kl=a(c,[["render",Ul],["__file","Plane.html.vue"]]);export{Kl as default};
