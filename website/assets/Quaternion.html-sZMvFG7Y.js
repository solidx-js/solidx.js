import{_ as s,r as d,o as r,c as i,a as t,b as n,w as o,d as e,e as a}from"./app-7lRh3UNW.js";const h={},c=a('<h1 id="class-quaternion" tabindex="-1"><a class="header-anchor" href="#class-quaternion" aria-hidden="true">#</a> Class: Quaternion</h1><p>Class used to store quaternion data Example Playground - Overview - https://playground.babylonjs.com/#L49EJ7#100</p><p><strong><code>See</code></strong></p><ul><li>https://en.wikipedia.org/wiki/Quaternion</li><li>https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms</li></ul><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h3>',6),u=t("h3",{id:"accessors",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#accessors","aria-hidden":"true"},"#"),e(" Accessors")],-1),_=t("h3",{id:"methods",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),e(" Methods")],-1),f=t("h2",{id:"constructors-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#constructors-1","aria-hidden":"true"},"#"),e(" Constructors")],-1),p=t("h3",{id:"constructor",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#constructor","aria-hidden":"true"},"#"),e(" constructor")],-1),y=t("strong",null,"new Quaternion",-1),m=t("code",null,"x?",-1),g=t("code",null,"y?",-1),x=t("code",null,"z?",-1),b=t("code",null,"w?",-1),Q=t("code",null,"Quaternion",-1),T=a('<p>Creates a new Quaternion from the given floats</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the first component (0 by default)</td></tr><tr><td style="text-align:left;"><code>y?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the second component (0 by default)</td></tr><tr><td style="text-align:left;"><code>z?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the third component (0 by default)</td></tr><tr><td style="text-align:left;"><code>w?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the fourth component (1.0 by default)</td></tr></tbody></table><h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4>',4),q=t("code",null,"Quaternion",-1),R=a('<h2 id="accessors-1" tabindex="-1"><a class="header-anchor" href="#accessors-1" aria-hidden="true">#</a> Accessors</h2><h3 id="w" tabindex="-1"><a class="header-anchor" href="#w" aria-hidden="true">#</a> w</h3><p>• <code>get</code> <strong>w</strong>(): <code>number</code></p><p>Gets or sets the w coordinate</p><h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>• <code>set</code> <strong>w</strong>(<code>value</code>): <code>void</code></p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="returns-2" tabindex="-1"><a class="header-anchor" href="#returns-2" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><hr><h3 id="x" tabindex="-1"><a class="header-anchor" href="#x" aria-hidden="true">#</a> x</h3><p>• <code>get</code> <strong>x</strong>(): <code>number</code></p><p>Gets or sets the x coordinate</p><h4 id="returns-3" tabindex="-1"><a class="header-anchor" href="#returns-3" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>• <code>set</code> <strong>x</strong>(<code>value</code>): <code>void</code></p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="returns-4" tabindex="-1"><a class="header-anchor" href="#returns-4" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><hr><h3 id="y" tabindex="-1"><a class="header-anchor" href="#y" aria-hidden="true">#</a> y</h3><p>• <code>get</code> <strong>y</strong>(): <code>number</code></p><p>Gets or sets the y coordinate</p><h4 id="returns-5" tabindex="-1"><a class="header-anchor" href="#returns-5" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>• <code>set</code> <strong>y</strong>(<code>value</code>): <code>void</code></p><h4 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="returns-6" tabindex="-1"><a class="header-anchor" href="#returns-6" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><hr><h3 id="z" tabindex="-1"><a class="header-anchor" href="#z" aria-hidden="true">#</a> z</h3><p>• <code>get</code> <strong>z</strong>(): <code>number</code></p><p>Gets or sets the z coordinate</p><h4 id="returns-7" tabindex="-1"><a class="header-anchor" href="#returns-7" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>• <code>set</code> <strong>z</strong>(<code>value</code>): <code>void</code></p><h4 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h4 id="returns-8" tabindex="-1"><a class="header-anchor" href="#returns-8" aria-hidden="true">#</a> Returns</h4><p><code>void</code></p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> add</h3>',46),v=t("strong",null,"add",-1),w=t("code",null,"other",-1),E=t("code",null,"Quaternion",-1),P=t("p",null,"Adds two quaternions Example Playground https://playground.babylonjs.com/#L49EJ7#10",-1),j=t("h4",{id:"parameters-5",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-5","aria-hidden":"true"},"#"),e(" Parameters")],-1),D=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),N=t("td",{style:{"text-align":"left"}},[t("code",null,"other")],-1),I={style:{"text-align":"left"}},L=t("code",null,"DeepImmutableObject",-1),z=t("code",null,"Quaternion",-1),J=t("td",{style:{"text-align":"left"}},"defines the second operand",-1),V=t("h4",{id:"returns-9",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-9","aria-hidden":"true"},"#"),e(" Returns")],-1),A=t("code",null,"Quaternion",-1),F=t("p",null,"a new quaternion as the addition result of the given one and the current quaternion",-1),O=t("hr",null,null,-1),k=t("h3",{id:"addinplace",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#addinplace","aria-hidden":"true"},"#"),e(" addInPlace")],-1),C=t("strong",null,"addInPlace",-1),M=t("code",null,"other",-1),S=t("code",null,"Quaternion",-1),H=t("p",null,"Add a quaternion to the current one Example Playground https://playground.babylonjs.com/#L49EJ7#11",-1),G=t("h4",{id:"parameters-6",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-6","aria-hidden":"true"},"#"),e(" Parameters")],-1),Y=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),U=t("td",{style:{"text-align":"left"}},[t("code",null,"other")],-1),B={style:{"text-align":"left"}},Z=t("code",null,"DeepImmutableObject",-1),X=t("code",null,"Quaternion",-1),W=t("td",{style:{"text-align":"left"}},"defines the quaternion to add",-1),K=t("h4",{id:"returns-10",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-10","aria-hidden":"true"},"#"),e(" Returns")],-1),$=t("code",null,"Quaternion",-1),tt=a('<p>the current quaternion</p><hr><h3 id="asarray" tabindex="-1"><a class="header-anchor" href="#asarray" aria-hidden="true">#</a> asArray</h3><p>▸ <strong>asArray</strong>(): <code>number</code>[]</p><p>Copy the quaternion to an array Example Playground https://playground.babylonjs.com/#L49EJ7#13</p><h4 id="returns-11" tabindex="-1"><a class="header-anchor" href="#returns-11" aria-hidden="true">#</a> Returns</h4><p><code>number</code>[]</p><p>a new array populated with 4 elements from the quaternion coordinates</p><hr><h3 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> clone</h3>',10),et=t("strong",null,"clone",-1),lt=t("code",null,"Quaternion",-1),nt=t("p",null,"Clone the current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#12",-1),ot=t("h4",{id:"returns-12",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-12","aria-hidden":"true"},"#"),e(" Returns")],-1),at=t("code",null,"Quaternion",-1),st=t("p",null,"a new quaternion copied from the current one",-1),dt=t("hr",null,null,-1),rt=t("h3",{id:"conjugate",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#conjugate","aria-hidden":"true"},"#"),e(" conjugate")],-1),it=t("strong",null,"conjugate",-1),ht=t("code",null,"Quaternion",-1),ct=t("p",null,"Conjugates (1-q) the current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#83",-1),ut=t("h4",{id:"returns-13",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-13","aria-hidden":"true"},"#"),e(" Returns")],-1),_t=t("code",null,"Quaternion",-1),ft=t("p",null,"a new quaternion",-1),pt=t("hr",null,null,-1),yt=t("h3",{id:"conjugateinplace",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#conjugateinplace","aria-hidden":"true"},"#"),e(" conjugateInPlace")],-1),mt=t("strong",null,"conjugateInPlace",-1),gt=t("code",null,"Quaternion",-1),xt=t("p",null,"Conjugates in place the current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#82",-1),bt=t("h4",{id:"returns-14",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-14","aria-hidden":"true"},"#"),e(" Returns")],-1),Qt=t("code",null,"Quaternion",-1),Tt=a('<p>the current updated quaternion</p><hr><h3 id="conjugatetoref" tabindex="-1"><a class="header-anchor" href="#conjugatetoref" aria-hidden="true">#</a> conjugateToRef</h3><p>▸ <strong>conjugateToRef</strong>&lt;<code>T</code>&gt;(<code>ref</code>): <code>T</code></p><p>Conjugates the current quaternion and stores the result in the given quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#81</p><h4 id="type-parameters" tabindex="-1"><a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a> Type parameters</h4>',6),qt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Rt=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),vt={style:{"text-align":"left"}},wt=t("code",null,"Quaternion",-1),Et=a('<h4 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ref</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">defines the target quaternion</td></tr></tbody></table><h4 id="returns-15" tabindex="-1"><a class="header-anchor" href="#returns-15" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>result input</p><hr><h3 id="copyfrom" tabindex="-1"><a class="header-anchor" href="#copyfrom" aria-hidden="true">#</a> copyFrom</h3>',7),Pt=t("strong",null,"copyFrom",-1),jt=t("code",null,"other",-1),Dt=t("code",null,"Quaternion",-1),Nt=t("p",null,"Copy a quaternion to the current one Example Playground https://playground.babylonjs.com/#L49EJ7#86",-1),It=t("h4",{id:"parameters-8",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-8","aria-hidden":"true"},"#"),e(" Parameters")],-1),Lt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),zt=t("td",{style:{"text-align":"left"}},[t("code",null,"other")],-1),Jt={style:{"text-align":"left"}},Vt=t("code",null,"DeepImmutableObject",-1),At=t("code",null,"Quaternion",-1),Ft=t("td",{style:{"text-align":"left"}},"defines the other quaternion",-1),Ot=t("h4",{id:"returns-16",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-16","aria-hidden":"true"},"#"),e(" Returns")],-1),kt=t("code",null,"Quaternion",-1),Ct=t("p",null,"the updated current quaternion",-1),Mt=t("hr",null,null,-1),St=t("h3",{id:"copyfromfloats",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#copyfromfloats","aria-hidden":"true"},"#"),e(" copyFromFloats")],-1),Ht=t("strong",null,"copyFromFloats",-1),Gt=t("code",null,"x",-1),Yt=t("code",null,"y",-1),Ut=t("code",null,"z",-1),Bt=t("code",null,"w",-1),Zt=t("code",null,"Quaternion",-1),Xt=a('<p>Updates the current quaternion with the given float coordinates Example Playground https://playground.babylonjs.com/#L49EJ7#87</p><h4 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the x coordinate</td></tr><tr><td style="text-align:left;"><code>y</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the y coordinate</td></tr><tr><td style="text-align:left;"><code>z</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the z coordinate</td></tr><tr><td style="text-align:left;"><code>w</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the w coordinate</td></tr></tbody></table><h4 id="returns-17" tabindex="-1"><a class="header-anchor" href="#returns-17" aria-hidden="true">#</a> Returns</h4>',4),Wt=t("code",null,"Quaternion",-1),Kt=a('<p>the updated current quaternion</p><hr><h3 id="dot" tabindex="-1"><a class="header-anchor" href="#dot" aria-hidden="true">#</a> dot</h3><p>▸ <strong>dot</strong>(<code>other</code>): <code>number</code></p><p>Returns the dot product (float) between the current quaternions and &quot;other&quot;</p><h4 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10" aria-hidden="true">#</a> Parameters</h4>',6),$t=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),te=t("td",{style:{"text-align":"left"}},[t("code",null,"other")],-1),ee={style:{"text-align":"left"}},le=t("code",null,"DeepImmutableObject",-1),ne=t("code",null,"Quaternion",-1),oe=t("td",{style:{"text-align":"left"}},"defines the right operand",-1),ae=a('<h4 id="returns-18" tabindex="-1"><a class="header-anchor" href="#returns-18" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>the dot product</p><hr><h3 id="equals" tabindex="-1"><a class="header-anchor" href="#equals" aria-hidden="true">#</a> equals</h3><p>▸ <strong>equals</strong>(<code>otherQuaternion</code>): <code>boolean</code></p><p>Check if two quaternions are equals Example Playground https://playground.babylonjs.com/#L49EJ7#38</p><h4 id="parameters-11" tabindex="-1"><a class="header-anchor" href="#parameters-11" aria-hidden="true">#</a> Parameters</h4>',8),se=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),de=t("td",{style:{"text-align":"left"}},[t("code",null,"otherQuaternion")],-1),re={style:{"text-align":"left"}},ie=t("code",null,"DeepImmutableObject",-1),he=t("code",null,"Quaternion",-1),ce=t("td",{style:{"text-align":"left"}},"defines the second operand",-1),ue=a('<h4 id="returns-19" tabindex="-1"><a class="header-anchor" href="#returns-19" aria-hidden="true">#</a> Returns</h4><p><code>boolean</code></p><p>true if the current quaternion and the given one coordinates are strictly equals</p><hr><h3 id="equalswithepsilon" tabindex="-1"><a class="header-anchor" href="#equalswithepsilon" aria-hidden="true">#</a> equalsWithEpsilon</h3><p>▸ <strong>equalsWithEpsilon</strong>(<code>otherQuaternion</code>, <code>epsilon?</code>): <code>boolean</code></p><p>Gets a boolean if two quaternions are equals (using an epsilon value) Example Playground https://playground.babylonjs.com/#L49EJ7#37</p><h4 id="parameters-12" tabindex="-1"><a class="header-anchor" href="#parameters-12" aria-hidden="true">#</a> Parameters</h4>',8),_e=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),fe=t("td",{style:{"text-align":"left"}},[t("code",null,"otherQuaternion")],-1),pe={style:{"text-align":"left"}},ye=t("code",null,"DeepImmutableObject",-1),me=t("code",null,"Quaternion",-1),ge=t("td",{style:{"text-align":"left"}},"defines the other quaternion",-1),xe=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"epsilon?")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"defines the minimal distance to consider equality")],-1),be=t("h4",{id:"returns-20",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-20","aria-hidden":"true"},"#"),e(" Returns")],-1),Qe=t("p",null,[t("code",null,"boolean")],-1),Te=t("p",null,"true if the given quaternion coordinates are close to the current ones by a distance of epsilon.",-1),qe=t("hr",null,null,-1),Re=t("h3",{id:"fromrotationmatrix",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#fromrotationmatrix","aria-hidden":"true"},"#"),e(" fromRotationMatrix")],-1),ve=t("strong",null,"fromRotationMatrix",-1),we=t("code",null,"matrix",-1),Ee=t("code",null,"Quaternion",-1),Pe=t("p",null,"Updates the current quaternion from the given rotation matrix values Example Playground https://playground.babylonjs.com/#L49EJ7#41",-1),je=t("h4",{id:"parameters-13",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-13","aria-hidden":"true"},"#"),e(" Parameters")],-1),De=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Ne=t("td",{style:{"text-align":"left"}},[t("code",null,"matrix")],-1),Ie={style:{"text-align":"left"}},Le=t("code",null,"DeepImmutableObject",-1),ze=t("code",null,"Matrix",-1),Je=t("td",{style:{"text-align":"left"}},"defines the source matrix",-1),Ve=t("h4",{id:"returns-21",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-21","aria-hidden":"true"},"#"),e(" Returns")],-1),Ae=t("code",null,"Quaternion",-1),Fe=a('<p>the current updated quaternion</p><hr><h3 id="getclassname" tabindex="-1"><a class="header-anchor" href="#getclassname" aria-hidden="true">#</a> getClassName</h3><p>▸ <strong>getClassName</strong>(): <code>string</code></p><p>Gets the class name of the quaternion</p><h4 id="returns-22" tabindex="-1"><a class="header-anchor" href="#returns-22" aria-hidden="true">#</a> Returns</h4><p><code>string</code></p><p>the string &quot;Quaternion&quot;</p><hr><h3 id="gethashcode" tabindex="-1"><a class="header-anchor" href="#gethashcode" aria-hidden="true">#</a> getHashCode</h3><p>▸ <strong>getHashCode</strong>(): <code>number</code></p><p>Gets a hash code for this quaternion</p><h4 id="returns-23" tabindex="-1"><a class="header-anchor" href="#returns-23" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>the quaternion hash code</p><hr><h3 id="invert" tabindex="-1"><a class="header-anchor" href="#invert" aria-hidden="true">#</a> invert</h3>',17),Oe=t("strong",null,"invert",-1),ke=t("code",null,"Quaternion",-1),Ce=t("p",null,"Returns the inverse of the current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#84",-1),Me=t("h4",{id:"returns-24",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-24","aria-hidden":"true"},"#"),e(" Returns")],-1),Se=t("code",null,"Quaternion",-1),He=t("p",null,"a new quaternion",-1),Ge=t("hr",null,null,-1),Ye=t("h3",{id:"invertinplace",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#invertinplace","aria-hidden":"true"},"#"),e(" invertInPlace")],-1),Ue=t("strong",null,"invertInPlace",-1),Be=t("code",null,"Quaternion",-1),Ze=t("p",null,"Invert in place the current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#85",-1),Xe=t("h4",{id:"returns-25",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-25","aria-hidden":"true"},"#"),e(" Returns")],-1),We=t("code",null,"Quaternion",-1),Ke=a('<p>this quaternion</p><hr><h3 id="length" tabindex="-1"><a class="header-anchor" href="#length" aria-hidden="true">#</a> length</h3><p>▸ <strong>length</strong>(): <code>number</code></p><p>Gets length of current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#28</p><h4 id="returns-26" tabindex="-1"><a class="header-anchor" href="#returns-26" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>the quaternion length (float)</p><hr><h3 id="lengthsquared" tabindex="-1"><a class="header-anchor" href="#lengthsquared" aria-hidden="true">#</a> lengthSquared</h3><p>▸ <strong>lengthSquared</strong>(): <code>number</code></p><p>Gets squared length of current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#29</p><h4 id="returns-27" tabindex="-1"><a class="header-anchor" href="#returns-27" aria-hidden="true">#</a> Returns</h4><p><code>number</code></p><p>the quaternion length (float)</p><hr><h3 id="multiply" tabindex="-1"><a class="header-anchor" href="#multiply" aria-hidden="true">#</a> multiply</h3>',17),$e=t("strong",null,"multiply",-1),tl=t("code",null,"q1",-1),el=t("code",null,"Quaternion",-1),ll=t("p",null,"Multiplies two quaternions Example Playground https://playground.babylonjs.com/#L49EJ7#43",-1),nl=t("h4",{id:"parameters-14",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-14","aria-hidden":"true"},"#"),e(" Parameters")],-1),ol=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),al=t("td",{style:{"text-align":"left"}},[t("code",null,"q1")],-1),sl={style:{"text-align":"left"}},dl=t("code",null,"DeepImmutableObject",-1),rl=t("code",null,"Quaternion",-1),il=t("td",{style:{"text-align":"left"}},"defines the second operand",-1),hl=t("h4",{id:"returns-28",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-28","aria-hidden":"true"},"#"),e(" Returns")],-1),cl=t("code",null,"Quaternion",-1),ul=t("p",null,'a new quaternion set as the multiplication result of the current one with the given one "q1"',-1),_l=t("hr",null,null,-1),fl=t("h3",{id:"multiplyinplace",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#multiplyinplace","aria-hidden":"true"},"#"),e(" multiplyInPlace")],-1),pl=t("strong",null,"multiplyInPlace",-1),yl=t("code",null,"q1",-1),ml=t("code",null,"Quaternion",-1),gl=t("p",null,'Updates the current quaternion with the multiplication of itself with the given one "q1" Example Playground https://playground.babylonjs.com/#L49EJ7#46',-1),xl=t("h4",{id:"parameters-15",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-15","aria-hidden":"true"},"#"),e(" Parameters")],-1),bl=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Ql=t("td",{style:{"text-align":"left"}},[t("code",null,"q1")],-1),Tl={style:{"text-align":"left"}},ql=t("code",null,"DeepImmutableObject",-1),Rl=t("code",null,"Quaternion",-1),vl=t("td",{style:{"text-align":"left"}},"defines the second operand",-1),wl=t("h4",{id:"returns-29",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-29","aria-hidden":"true"},"#"),e(" Returns")],-1),El=t("code",null,"Quaternion",-1),Pl=a('<p>the currentupdated quaternion</p><hr><h3 id="multiplytoref" tabindex="-1"><a class="header-anchor" href="#multiplytoref" aria-hidden="true">#</a> multiplyToRef</h3><p>▸ <strong>multiplyToRef</strong>&lt;<code>T</code>&gt;(<code>q1</code>, <code>result</code>): <code>T</code></p><p>Sets the given &quot;result&quot; as the multiplication result of the current one with the given one &quot;q1&quot; Example Playground https://playground.babylonjs.com/#L49EJ7#45</p><h4 id="type-parameters-1" tabindex="-1"><a class="header-anchor" href="#type-parameters-1" aria-hidden="true">#</a> Type parameters</h4>',6),jl=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Dl=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Nl={style:{"text-align":"left"}},Il=t("code",null,"Quaternion",-1),Ll=t("h4",{id:"parameters-16",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-16","aria-hidden":"true"},"#"),e(" Parameters")],-1),zl=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Jl=t("td",{style:{"text-align":"left"}},[t("code",null,"q1")],-1),Vl={style:{"text-align":"left"}},Al=t("code",null,"DeepImmutableObject",-1),Fl=t("code",null,"Quaternion",-1),Ol=t("td",{style:{"text-align":"left"}},"defines the second operand",-1),kl=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"defines the target quaternion")],-1),Cl=t("h4",{id:"returns-30",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-30","aria-hidden":"true"},"#"),e(" Returns")],-1),Ml=t("p",null,[t("code",null,"T")],-1),Sl=t("p",null,"the current quaternion",-1),Hl=t("hr",null,null,-1),Gl=t("h3",{id:"normalize",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#normalize","aria-hidden":"true"},"#"),e(" normalize")],-1),Yl=t("strong",null,"normalize",-1),Ul=t("code",null,"Quaternion",-1),Bl=t("p",null,"Normalize in place the current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#54",-1),Zl=t("h4",{id:"returns-31",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-31","aria-hidden":"true"},"#"),e(" Returns")],-1),Xl=t("code",null,"Quaternion",-1),Wl=t("p",null,"the current updated quaternion",-1),Kl=t("hr",null,null,-1),$l=t("h3",{id:"normalizefromlength",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#normalizefromlength","aria-hidden":"true"},"#"),e(" normalizeFromLength")],-1),tn=t("strong",null,"normalizeFromLength",-1),en=t("code",null,"len",-1),ln=t("code",null,"Quaternion",-1),nn=a('<p>Normalize the current quaternion with the given input length. Please note that this is an in place operation.</p><h4 id="parameters-17" tabindex="-1"><a class="header-anchor" href="#parameters-17" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>len</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">the length of the quaternion</td></tr></tbody></table><h4 id="returns-32" tabindex="-1"><a class="header-anchor" href="#returns-32" aria-hidden="true">#</a> Returns</h4>',4),on=t("code",null,"Quaternion",-1),an=t("p",null,"the current updated Quaternion",-1),sn=t("hr",null,null,-1),dn=t("h3",{id:"normalizetonew",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#normalizetonew","aria-hidden":"true"},"#"),e(" normalizeToNew")],-1),rn=t("strong",null,"normalizeToNew",-1),hn=t("code",null,"Quaternion",-1),cn=t("p",null,"Normalize a copy of the current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#55",-1),un=t("h4",{id:"returns-33",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-33","aria-hidden":"true"},"#"),e(" Returns")],-1),_n=t("code",null,"Quaternion",-1),fn=a('<p>the normalized quaternion</p><hr><h3 id="normalizetoref" tabindex="-1"><a class="header-anchor" href="#normalizetoref" aria-hidden="true">#</a> normalizeToRef</h3><p>▸ <strong>normalizeToRef</strong>&lt;<code>T</code>&gt;(<code>reference</code>): <code>T</code></p><p>Normalize the current Quaternion to the reference</p><h4 id="type-parameters-2" tabindex="-1"><a class="header-anchor" href="#type-parameters-2" aria-hidden="true">#</a> Type parameters</h4>',6),pn=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),yn=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),mn={style:{"text-align":"left"}},gn=t("code",null,"Quaternion",-1),xn=a('<h4 id="parameters-18" tabindex="-1"><a class="header-anchor" href="#parameters-18" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>reference</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">define the Quaternion to update</td></tr></tbody></table><h4 id="returns-34" tabindex="-1"><a class="header-anchor" href="#returns-34" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>the updated Quaternion</p><hr><h3 id="scale" tabindex="-1"><a class="header-anchor" href="#scale" aria-hidden="true">#</a> scale</h3>',7),bn=t("strong",null,"scale",-1),Qn=t("code",null,"value",-1),Tn=t("code",null,"Quaternion",-1),qn=a('<p>Multiplies the current quaternion by a scale factor Example Playground https://playground.babylonjs.com/#L49EJ7#88</p><h4 id="parameters-19" tabindex="-1"><a class="header-anchor" href="#parameters-19" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the scale factor</td></tr></tbody></table><h4 id="returns-35" tabindex="-1"><a class="header-anchor" href="#returns-35" aria-hidden="true">#</a> Returns</h4>',4),Rn=t("code",null,"Quaternion",-1),vn=a('<p>a new quaternion set by multiplying the current quaternion coordinates by the float &quot;scale&quot;</p><hr><h3 id="scaleandaddtoref" tabindex="-1"><a class="header-anchor" href="#scaleandaddtoref" aria-hidden="true">#</a> scaleAndAddToRef</h3><p>▸ <strong>scaleAndAddToRef</strong>&lt;<code>T</code>&gt;(<code>scale</code>, <code>result</code>): <code>T</code></p><p>Scale the current quaternion values by a factor and add the result to a given quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#91</p><h4 id="type-parameters-3" tabindex="-1"><a class="header-anchor" href="#type-parameters-3" aria-hidden="true">#</a> Type parameters</h4>',6),wn=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),En=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Pn={style:{"text-align":"left"}},jn=t("code",null,"Quaternion",-1),Dn=a('<h4 id="parameters-20" tabindex="-1"><a class="header-anchor" href="#parameters-20" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>scale</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the scale factor</td></tr><tr><td style="text-align:left;"><code>result</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">defines the Quaternion object where to store the result</td></tr></tbody></table><h4 id="returns-36" tabindex="-1"><a class="header-anchor" href="#returns-36" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>result input</p><hr><h3 id="scaleinplace" tabindex="-1"><a class="header-anchor" href="#scaleinplace" aria-hidden="true">#</a> scaleInPlace</h3>',7),Nn=t("strong",null,"scaleInPlace",-1),In=t("code",null,"value",-1),Ln=t("code",null,"Quaternion",-1),zn=a('<p>Multiplies in place the current quaternion by a scale factor Example Playground https://playground.babylonjs.com/#L49EJ7#90</p><h4 id="parameters-21" tabindex="-1"><a class="header-anchor" href="#parameters-21" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>value</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the scale factor</td></tr></tbody></table><h4 id="returns-37" tabindex="-1"><a class="header-anchor" href="#returns-37" aria-hidden="true">#</a> Returns</h4>',4),Jn=t("code",null,"Quaternion",-1),Vn=a('<p>the current modified quaternion</p><hr><h3 id="scaletoref" tabindex="-1"><a class="header-anchor" href="#scaletoref" aria-hidden="true">#</a> scaleToRef</h3><p>▸ <strong>scaleToRef</strong>&lt;<code>T</code>&gt;(<code>scale</code>, <code>result</code>): <code>T</code></p><p>Scale the current quaternion values by a factor and stores the result to a given quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#89</p><h4 id="type-parameters-4" tabindex="-1"><a class="header-anchor" href="#type-parameters-4" aria-hidden="true">#</a> Type parameters</h4>',6),An=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Fn=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),On={style:{"text-align":"left"}},kn=t("code",null,"Quaternion",-1),Cn=a('<h4 id="parameters-22" tabindex="-1"><a class="header-anchor" href="#parameters-22" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>scale</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the scale factor</td></tr><tr><td style="text-align:left;"><code>result</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">defines the Quaternion object where to store the result</td></tr></tbody></table><h4 id="returns-38" tabindex="-1"><a class="header-anchor" href="#returns-38" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>result input</p><hr><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> set</h3>',7),Mn=t("strong",null,"set",-1),Sn=t("code",null,"x",-1),Hn=t("code",null,"y",-1),Gn=t("code",null,"z",-1),Yn=t("code",null,"w",-1),Un=t("code",null,"Quaternion",-1),Bn=a('<p>Updates the current quaternion from the given float coordinates Example Playground https://playground.babylonjs.com/#L49EJ7#56</p><h4 id="parameters-23" tabindex="-1"><a class="header-anchor" href="#parameters-23" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the x coordinate</td></tr><tr><td style="text-align:left;"><code>y</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the y coordinate</td></tr><tr><td style="text-align:left;"><code>z</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the z coordinate</td></tr><tr><td style="text-align:left;"><code>w</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the w coordinate</td></tr></tbody></table><h4 id="returns-39" tabindex="-1"><a class="header-anchor" href="#returns-39" aria-hidden="true">#</a> Returns</h4>',4),Zn=t("code",null,"Quaternion",-1),Xn=t("p",null,"the updated current quaternion",-1),Wn=t("hr",null,null,-1),Kn=t("h3",{id:"subtract",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#subtract","aria-hidden":"true"},"#"),e(" subtract")],-1),$n=t("strong",null,"subtract",-1),to=t("code",null,"other",-1),eo=t("code",null,"Quaternion",-1),lo=t("p",null,"Subtract two quaternions Example Playground https://playground.babylonjs.com/#L49EJ7#57",-1),no=t("h4",{id:"parameters-24",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-24","aria-hidden":"true"},"#"),e(" Parameters")],-1),oo=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),ao=t("td",{style:{"text-align":"left"}},[t("code",null,"other")],-1),so={style:{"text-align":"left"}},ro=t("code",null,"Quaternion",-1),io=t("td",{style:{"text-align":"left"}},"defines the second operand",-1),ho=t("h4",{id:"returns-40",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-40","aria-hidden":"true"},"#"),e(" Returns")],-1),co=t("code",null,"Quaternion",-1),uo=t("p",null,"a new quaternion as the subtraction result of the given one from the current one",-1),_o=t("hr",null,null,-1),fo=t("h3",{id:"subtractinplace",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#subtractinplace","aria-hidden":"true"},"#"),e(" subtractInPlace")],-1),po=t("strong",null,"subtractInPlace",-1),yo=t("code",null,"other",-1),mo=t("code",null,"Quaternion",-1),go=t("p",null,"Subtract a quaternion to the current one Example Playground https://playground.babylonjs.com/#L49EJ7#58",-1),xo=t("h4",{id:"parameters-25",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-25","aria-hidden":"true"},"#"),e(" Parameters")],-1),bo=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Qo=t("td",{style:{"text-align":"left"}},[t("code",null,"other")],-1),To={style:{"text-align":"left"}},qo=t("code",null,"DeepImmutableObject",-1),Ro=t("code",null,"Quaternion",-1),vo=t("td",{style:{"text-align":"left"}},"defines the quaternion to subtract",-1),wo=t("h4",{id:"returns-41",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-41","aria-hidden":"true"},"#"),e(" Returns")],-1),Eo=t("code",null,"Quaternion",-1),Po=t("p",null,"the current quaternion",-1),jo=t("hr",null,null,-1),Do=t("h3",{id:"toarray",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#toarray","aria-hidden":"true"},"#"),e(" toArray")],-1),No=t("strong",null,"toArray",-1),Io=t("code",null,"array",-1),Lo=t("code",null,"index?",-1),zo=t("code",null,"Quaternion",-1),Jo=a('<p>Stores from the starting index in the given array the Quaternion successive values Example Playground https://playground.babylonjs.com/#L49EJ7#59</p><h4 id="parameters-26" tabindex="-1"><a class="header-anchor" href="#parameters-26" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>array</code></td><td style="text-align:left;"><code>FloatArray</code></td><td style="text-align:left;">defines the array where to store the x,y,z,w components</td></tr><tr><td style="text-align:left;"><code>index?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines an optional index in the target array to define where to start storing values</td></tr></tbody></table><h4 id="returns-42" tabindex="-1"><a class="header-anchor" href="#returns-42" aria-hidden="true">#</a> Returns</h4>',4),Vo=t("code",null,"Quaternion",-1),Ao=t("p",null,"the current Quaternion object",-1),Fo=t("hr",null,null,-1),Oo=t("h3",{id:"toeulerangles",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#toeulerangles","aria-hidden":"true"},"#"),e(" toEulerAngles")],-1),ko=t("strong",null,"toEulerAngles",-1),Co=t("code",null,"Vector3",-1),Mo=t("p",null,"Returns a new Vector3 set with the Euler angles translated from the current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#32",-1),So=t("h4",{id:"returns-43",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-43","aria-hidden":"true"},"#"),e(" Returns")],-1),Ho=t("code",null,"Vector3",-1),Go=a('<p>a new Vector3 containing the Euler angles</p><p><strong><code>See</code></strong></p><p>https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/rotation_conventions</p><hr><h3 id="toeuleranglestoref" tabindex="-1"><a class="header-anchor" href="#toeuleranglestoref" aria-hidden="true">#</a> toEulerAnglesToRef</h3><p>▸ <strong>toEulerAnglesToRef</strong>&lt;<code>T</code>&gt;(<code>result</code>): <code>T</code></p><p>Sets the given vector3 &quot;result&quot; with the Euler angles translated from the current quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#31</p><h4 id="type-parameters-5" tabindex="-1"><a class="header-anchor" href="#type-parameters-5" aria-hidden="true">#</a> Type parameters</h4>',8),Yo=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Uo=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Bo={style:{"text-align":"left"}},Zo=t("code",null,"Vector3",-1),Xo=a('<h4 id="parameters-27" tabindex="-1"><a class="header-anchor" href="#parameters-27" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>result</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">defines the vector which will be filled with the Euler angles</td></tr></tbody></table><h4 id="returns-44" tabindex="-1"><a class="header-anchor" href="#returns-44" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>result input</p><p><strong><code>See</code></strong></p><p>https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/rotation_conventions</p><hr><h3 id="torotationmatrix" tabindex="-1"><a class="header-anchor" href="#torotationmatrix" aria-hidden="true">#</a> toRotationMatrix</h3><p>▸ <strong>toRotationMatrix</strong>&lt;<code>T</code>&gt;(<code>result</code>): <code>T</code></p><p>Updates the given rotation matrix with the current quaternion values Example Playground https://playground.babylonjs.com/#L49EJ7#67</p><h4 id="type-parameters-6" tabindex="-1"><a class="header-anchor" href="#type-parameters-6" aria-hidden="true">#</a> Type parameters</h4>',12),Wo=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Ko=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),$o={style:{"text-align":"left"}},ta=t("code",null,"Matrix",-1),ea=a('<h4 id="parameters-28" tabindex="-1"><a class="header-anchor" href="#parameters-28" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>result</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">defines the target matrix</td></tr></tbody></table><h4 id="returns-45" tabindex="-1"><a class="header-anchor" href="#returns-45" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>the updated matrix with the rotation</p><hr><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString</h3><p>▸ <strong>toString</strong>(): <code>string</code></p><p>Gets a string representation for the current quaternion</p><h4 id="returns-46" tabindex="-1"><a class="header-anchor" href="#returns-46" aria-hidden="true">#</a> Returns</h4><p><code>string</code></p><p>a string with the Quaternion coordinates</p><hr><h3 id="areclose" tabindex="-1"><a class="header-anchor" href="#areclose" aria-hidden="true">#</a> AreClose</h3><p>▸ <strong>AreClose</strong>(<code>quat0</code>, <code>quat1</code>, <code>epsilon?</code>): <code>boolean</code></p><p>Checks if the orientations of two rotation quaternions are close to each other Example Playground https://playground.babylonjs.com/#L49EJ7#60</p><h4 id="parameters-29" tabindex="-1"><a class="header-anchor" href="#parameters-29" aria-hidden="true">#</a> Parameters</h4>',17),la=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),na=t("td",{style:{"text-align":"left"}},[t("code",null,"quat0")],-1),oa={style:{"text-align":"left"}},aa=t("code",null,"DeepImmutableObject",-1),sa=t("code",null,"Quaternion",-1),da=t("td",{style:{"text-align":"left"}},"defines the first quaternion to check",-1),ra=t("td",{style:{"text-align":"left"}},[t("code",null,"quat1")],-1),ia={style:{"text-align":"left"}},ha=t("code",null,"DeepImmutableObject",-1),ca=t("code",null,"Quaternion",-1),ua=t("td",{style:{"text-align":"left"}},"defines the second quaternion to check",-1),_a=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"epsilon?")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"defines closeness, 0 same orientation, 1 PI apart, default 0.1")],-1),fa=a('<h4 id="returns-47" tabindex="-1"><a class="header-anchor" href="#returns-47" aria-hidden="true">#</a> Returns</h4><p><code>boolean</code></p><p>true if the two quaternions are close to each other within epsilon</p><hr><h3 id="dot-1" tabindex="-1"><a class="header-anchor" href="#dot-1" aria-hidden="true">#</a> Dot</h3><p>▸ <strong>Dot</strong>(<code>left</code>, <code>right</code>): <code>number</code></p><p>Returns the dot product (float) between the quaternions &quot;left&quot; and &quot;right&quot; Example Playground https://playground.babylonjs.com/#L49EJ7#61</p><h4 id="parameters-30" tabindex="-1"><a class="header-anchor" href="#parameters-30" aria-hidden="true">#</a> Parameters</h4>',8),pa=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),ya=t("td",{style:{"text-align":"left"}},[t("code",null,"left")],-1),ma={style:{"text-align":"left"}},ga=t("code",null,"DeepImmutableObject",-1),xa=t("code",null,"Quaternion",-1),ba=t("td",{style:{"text-align":"left"}},"defines the left operand",-1),Qa=t("td",{style:{"text-align":"left"}},[t("code",null,"right")],-1),Ta={style:{"text-align":"left"}},qa=t("code",null,"DeepImmutableObject",-1),Ra=t("code",null,"Quaternion",-1),va=t("td",{style:{"text-align":"left"}},"defines the right operand",-1),wa=t("h4",{id:"returns-48",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-48","aria-hidden":"true"},"#"),e(" Returns")],-1),Ea=t("p",null,[t("code",null,"number")],-1),Pa=t("p",null,"the dot product",-1),ja=t("hr",null,null,-1),Da=t("h3",{id:"fromarray",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#fromarray","aria-hidden":"true"},"#"),e(" FromArray")],-1),Na=t("strong",null,"FromArray",-1),Ia=t("code",null,"array",-1),La=t("code",null,"offset?",-1),za=t("code",null,"Quaternion",-1),Ja=a('<p>Creates a new quaternion from data stored into an array Example Playground https://playground.babylonjs.com/#L49EJ7#63</p><h4 id="parameters-31" tabindex="-1"><a class="header-anchor" href="#parameters-31" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>array</code></td><td style="text-align:left;"><code>DeepImmutableObject</code>&lt;<code>ArrayLike</code>&lt;<code>number</code>&gt;&gt;</td><td style="text-align:left;">defines the data source</td></tr><tr><td style="text-align:left;"><code>offset?</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the offset in the source array where the data starts</td></tr></tbody></table><h4 id="returns-49" tabindex="-1"><a class="header-anchor" href="#returns-49" aria-hidden="true">#</a> Returns</h4>',4),Va=t("code",null,"Quaternion",-1),Aa=a('<p>a new quaternion</p><hr><h3 id="fromarraytoref" tabindex="-1"><a class="header-anchor" href="#fromarraytoref" aria-hidden="true">#</a> FromArrayToRef</h3><p>▸ <strong>FromArrayToRef</strong>&lt;<code>T</code>&gt;(<code>array</code>, <code>offset</code>, <code>result</code>): <code>T</code></p><p>Updates the given quaternion &quot;result&quot; from the starting index of the given array. Example Playground https://playground.babylonjs.com/#L49EJ7#64</p><h4 id="type-parameters-7" tabindex="-1"><a class="header-anchor" href="#type-parameters-7" aria-hidden="true">#</a> Type parameters</h4>',6),Fa=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Oa=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),ka={style:{"text-align":"left"}},Ca=t("code",null,"Quaternion",-1),Ma=a('<h4 id="parameters-32" tabindex="-1"><a class="header-anchor" href="#parameters-32" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>array</code></td><td style="text-align:left;"><code>DeepImmutableObject</code>&lt;<code>ArrayLike</code>&lt;<code>number</code>&gt;&gt;</td><td style="text-align:left;">the array to pull values from</td></tr><tr><td style="text-align:left;"><code>offset</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">the offset into the array to start at</td></tr><tr><td style="text-align:left;"><code>result</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">the quaternion to store the result in</td></tr></tbody></table><h4 id="returns-50" tabindex="-1"><a class="header-anchor" href="#returns-50" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>result input</p><hr><h3 id="fromeulerangles" tabindex="-1"><a class="header-anchor" href="#fromeulerangles" aria-hidden="true">#</a> FromEulerAngles</h3>',7),Sa=t("strong",null,"FromEulerAngles",-1),Ha=t("code",null,"x",-1),Ga=t("code",null,"y",-1),Ya=t("code",null,"z",-1),Ua=t("code",null,"Quaternion",-1),Ba=a('<p>Create a quaternion from Euler rotation angles Example Playground https://playground.babylonjs.com/#L49EJ7#33</p><h4 id="parameters-33" tabindex="-1"><a class="header-anchor" href="#parameters-33" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Pitch</td></tr><tr><td style="text-align:left;"><code>y</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Yaw</td></tr><tr><td style="text-align:left;"><code>z</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Roll</td></tr></tbody></table><h4 id="returns-51" tabindex="-1"><a class="header-anchor" href="#returns-51" aria-hidden="true">#</a> Returns</h4>',4),Za=t("code",null,"Quaternion",-1),Xa=a('<p>the new Quaternion</p><hr><h3 id="fromeuleranglestoref" tabindex="-1"><a class="header-anchor" href="#fromeuleranglestoref" aria-hidden="true">#</a> FromEulerAnglesToRef</h3><p>▸ <strong>FromEulerAnglesToRef</strong>&lt;<code>T</code>&gt;(<code>x</code>, <code>y</code>, <code>z</code>, <code>result</code>): <code>T</code></p><p>Updates a quaternion from Euler rotation angles Example Playground https://playground.babylonjs.com/#L49EJ7#34</p><h4 id="type-parameters-8" tabindex="-1"><a class="header-anchor" href="#type-parameters-8" aria-hidden="true">#</a> Type parameters</h4>',6),Wa=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Ka=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),$a={style:{"text-align":"left"}},ts=t("code",null,"Quaternion",-1),es=a('<h4 id="parameters-34" tabindex="-1"><a class="header-anchor" href="#parameters-34" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>x</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Pitch</td></tr><tr><td style="text-align:left;"><code>y</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Yaw</td></tr><tr><td style="text-align:left;"><code>z</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">Roll</td></tr><tr><td style="text-align:left;"><code>result</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">the quaternion to store the result</td></tr></tbody></table><h4 id="returns-52" tabindex="-1"><a class="header-anchor" href="#returns-52" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>the updated quaternion</p><hr><h3 id="fromeulervector" tabindex="-1"><a class="header-anchor" href="#fromeulervector" aria-hidden="true">#</a> FromEulerVector</h3>',7),ls=t("strong",null,"FromEulerVector",-1),ns=t("code",null,"vec",-1),os=t("code",null,"Quaternion",-1),as=t("p",null,"Create a quaternion from Euler rotation vector Example Playground https://playground.babylonjs.com/#L49EJ7#35",-1),ss=t("h4",{id:"parameters-35",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-35","aria-hidden":"true"},"#"),e(" Parameters")],-1),ds=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),rs=t("td",{style:{"text-align":"left"}},[t("code",null,"vec")],-1),is={style:{"text-align":"left"}},hs=t("code",null,"DeepImmutableObject",-1),cs=t("code",null,"Vector3",-1),us=t("td",{style:{"text-align":"left"}},"the Euler vector (x Pitch, y Yaw, z Roll)",-1),_s=t("h4",{id:"returns-53",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-53","aria-hidden":"true"},"#"),e(" Returns")],-1),fs=t("code",null,"Quaternion",-1),ps=a('<p>the new Quaternion</p><hr><h3 id="fromeulervectortoref" tabindex="-1"><a class="header-anchor" href="#fromeulervectortoref" aria-hidden="true">#</a> FromEulerVectorToRef</h3><p>▸ <strong>FromEulerVectorToRef</strong>&lt;<code>T</code>&gt;(<code>vec</code>, <code>result</code>): <code>T</code></p><p>Updates a quaternion from Euler rotation vector Example Playground https://playground.babylonjs.com/#L49EJ7#36</p><h4 id="type-parameters-9" tabindex="-1"><a class="header-anchor" href="#type-parameters-9" aria-hidden="true">#</a> Type parameters</h4>',6),ys=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),ms=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),gs={style:{"text-align":"left"}},xs=t("code",null,"Quaternion",-1),bs=t("h4",{id:"parameters-36",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-36","aria-hidden":"true"},"#"),e(" Parameters")],-1),Qs=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Ts=t("td",{style:{"text-align":"left"}},[t("code",null,"vec")],-1),qs={style:{"text-align":"left"}},Rs=t("code",null,"DeepImmutableObject",-1),vs=t("code",null,"Vector3",-1),ws=t("td",{style:{"text-align":"left"}},"the Euler vector (x Pitch, y Yaw, z Roll)",-1),Es=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"the quaternion to store the result")],-1),Ps=t("h4",{id:"returns-54",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-54","aria-hidden":"true"},"#"),e(" Returns")],-1),js=t("p",null,[t("code",null,"T")],-1),Ds=t("p",null,"the updated quaternion",-1),Ns=t("hr",null,null,-1),Is=t("h3",{id:"fromlookdirectionlh",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#fromlookdirectionlh","aria-hidden":"true"},"#"),e(" FromLookDirectionLH")],-1),Ls=t("strong",null,"FromLookDirectionLH",-1),zs=t("code",null,"forward",-1),Js=t("code",null,"up",-1),Vs=t("code",null,"Quaternion",-1),As=t("p",null,'Creates a new rotation value to orient an object to look towards the given forward direction, the up direction being oriented like "up". This function works in left handed mode Example Playground https://playground.babylonjs.com/#L49EJ7#96',-1),Fs=t("h4",{id:"parameters-37",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-37","aria-hidden":"true"},"#"),e(" Parameters")],-1),Os=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),ks=t("td",{style:{"text-align":"left"}},[t("code",null,"forward")],-1),Cs={style:{"text-align":"left"}},Ms=t("code",null,"DeepImmutableObject",-1),Ss=t("code",null,"Vector3",-1),Hs=t("td",{style:{"text-align":"left"}},"defines the forward direction - Must be normalized and orthogonal to up.",-1),Gs=t("td",{style:{"text-align":"left"}},[t("code",null,"up")],-1),Ys={style:{"text-align":"left"}},Us=t("code",null,"DeepImmutableObject",-1),Bs=t("code",null,"Vector3",-1),Zs=t("td",{style:{"text-align":"left"}},"defines the up vector for the entity - Must be normalized and orthogonal to forward.",-1),Xs=t("h4",{id:"returns-55",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-55","aria-hidden":"true"},"#"),e(" Returns")],-1),Ws=t("code",null,"Quaternion",-1),Ks=a('<p>A new quaternion oriented toward the specified forward and up.</p><hr><h3 id="fromlookdirectionlhtoref" tabindex="-1"><a class="header-anchor" href="#fromlookdirectionlhtoref" aria-hidden="true">#</a> FromLookDirectionLHToRef</h3><p>▸ <strong>FromLookDirectionLHToRef</strong>&lt;<code>T</code>&gt;(<code>forward</code>, <code>up</code>, <code>ref</code>): <code>T</code></p><p>Creates a new rotation value to orient an object to look towards the given forward direction with the up direction being oriented like &quot;up&quot;, and stores it in the target quaternion. This function works in left handed mode Example Playground https://playground.babylonjs.com/#L49EJ7#97</p><h4 id="type-parameters-10" tabindex="-1"><a class="header-anchor" href="#type-parameters-10" aria-hidden="true">#</a> Type parameters</h4>',6),$s=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),td=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),ed={style:{"text-align":"left"}},ld=t("code",null,"Quaternion",-1),nd=t("h4",{id:"parameters-38",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-38","aria-hidden":"true"},"#"),e(" Parameters")],-1),od=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),ad=t("td",{style:{"text-align":"left"}},[t("code",null,"forward")],-1),sd={style:{"text-align":"left"}},dd=t("code",null,"DeepImmutableObject",-1),rd=t("code",null,"Vector3",-1),id=t("td",{style:{"text-align":"left"}},"defines the forward direction - Must be normalized and orthogonal to up.",-1),hd=t("td",{style:{"text-align":"left"}},[t("code",null,"up")],-1),cd={style:{"text-align":"left"}},ud=t("code",null,"DeepImmutableObject",-1),_d=t("code",null,"Vector3",-1),fd=t("td",{style:{"text-align":"left"}},"defines the up vector for the entity - Must be normalized and orthogonal to forward.",-1),pd=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"ref")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"defines the target quaternion.")],-1),yd=t("h4",{id:"returns-56",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-56","aria-hidden":"true"},"#"),e(" Returns")],-1),md=t("p",null,[t("code",null,"T")],-1),gd=t("p",null,"result input",-1),xd=t("hr",null,null,-1),bd=t("h3",{id:"fromlookdirectionrh",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#fromlookdirectionrh","aria-hidden":"true"},"#"),e(" FromLookDirectionRH")],-1),Qd=t("strong",null,"FromLookDirectionRH",-1),Td=t("code",null,"forward",-1),qd=t("code",null,"up",-1),Rd=t("code",null,"Quaternion",-1),vd=t("p",null,'Creates a new rotation value to orient an object to look towards the given forward direction, the up direction being oriented like "up". This function works in right handed mode Example Playground https://playground.babylonjs.com/#L49EJ7#98',-1),wd=t("h4",{id:"parameters-39",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-39","aria-hidden":"true"},"#"),e(" Parameters")],-1),Ed=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Pd=t("td",{style:{"text-align":"left"}},[t("code",null,"forward")],-1),jd={style:{"text-align":"left"}},Dd=t("code",null,"DeepImmutableObject",-1),Nd=t("code",null,"Vector3",-1),Id=t("td",{style:{"text-align":"left"}},"defines the forward direction - Must be normalized and orthogonal to up.",-1),Ld=t("td",{style:{"text-align":"left"}},[t("code",null,"up")],-1),zd={style:{"text-align":"left"}},Jd=t("code",null,"DeepImmutableObject",-1),Vd=t("code",null,"Vector3",-1),Ad=t("td",{style:{"text-align":"left"}},"defines the up vector for the entity - Must be normalized and orthogonal to forward.",-1),Fd=t("h4",{id:"returns-57",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-57","aria-hidden":"true"},"#"),e(" Returns")],-1),Od=t("code",null,"Quaternion",-1),kd=a('<p>A new quaternion oriented toward the specified forward and up.</p><hr><h3 id="fromlookdirectionrhtoref" tabindex="-1"><a class="header-anchor" href="#fromlookdirectionrhtoref" aria-hidden="true">#</a> FromLookDirectionRHToRef</h3><p>▸ <strong>FromLookDirectionRHToRef</strong>&lt;<code>T</code>&gt;(<code>forward</code>, <code>up</code>, <code>ref</code>): <code>T</code></p><p>Creates a new rotation value to orient an object to look towards the given forward direction with the up direction being oriented like &quot;up&quot;, and stores it in the target quaternion. This function works in right handed mode Example Playground https://playground.babylonjs.com/#L49EJ7#105</p><h4 id="type-parameters-11" tabindex="-1"><a class="header-anchor" href="#type-parameters-11" aria-hidden="true">#</a> Type parameters</h4>',6),Cd=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Md=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Sd={style:{"text-align":"left"}},Hd=t("code",null,"Quaternion",-1),Gd=t("h4",{id:"parameters-40",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-40","aria-hidden":"true"},"#"),e(" Parameters")],-1),Yd=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Ud=t("td",{style:{"text-align":"left"}},[t("code",null,"forward")],-1),Bd={style:{"text-align":"left"}},Zd=t("code",null,"DeepImmutableObject",-1),Xd=t("code",null,"Vector3",-1),Wd=t("td",{style:{"text-align":"left"}},"defines the forward direction - Must be normalized and orthogonal to up.",-1),Kd=t("td",{style:{"text-align":"left"}},[t("code",null,"up")],-1),$d={style:{"text-align":"left"}},tr=t("code",null,"DeepImmutableObject",-1),er=t("code",null,"Vector3",-1),lr=t("td",{style:{"text-align":"left"}},"defines the up vector for the entity - Must be normalized and orthogonal to forward.",-1),nr=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"ref")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"defines the target quaternion.")],-1),or=t("h4",{id:"returns-58",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-58","aria-hidden":"true"},"#"),e(" Returns")],-1),ar=t("p",null,[t("code",null,"T")],-1),sr=t("p",null,"result input",-1),dr=t("hr",null,null,-1),rr=t("h3",{id:"fromrotationmatrix-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#fromrotationmatrix-1","aria-hidden":"true"},"#"),e(" FromRotationMatrix")],-1),ir=t("strong",null,"FromRotationMatrix",-1),hr=t("code",null,"matrix",-1),cr=t("code",null,"Quaternion",-1),ur=t("p",null,"Creates a new quaternion from a rotation matrix Example Playground https://playground.babylonjs.com/#L49EJ7#101",-1),_r=t("h4",{id:"parameters-41",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-41","aria-hidden":"true"},"#"),e(" Parameters")],-1),fr=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),pr=t("td",{style:{"text-align":"left"}},[t("code",null,"matrix")],-1),yr={style:{"text-align":"left"}},mr=t("code",null,"DeepImmutableObject",-1),gr=t("code",null,"Matrix",-1),xr=t("td",{style:{"text-align":"left"}},"defines the source matrix",-1),br=t("h4",{id:"returns-59",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-59","aria-hidden":"true"},"#"),e(" Returns")],-1),Qr=t("code",null,"Quaternion",-1),Tr=a('<p>a new quaternion created from the given rotation matrix values</p><hr><h3 id="fromrotationmatrixtoref" tabindex="-1"><a class="header-anchor" href="#fromrotationmatrixtoref" aria-hidden="true">#</a> FromRotationMatrixToRef</h3><p>▸ <strong>FromRotationMatrixToRef</strong>&lt;<code>T</code>&gt;(<code>matrix</code>, <code>result</code>): <code>T</code></p><p>Updates the given quaternion with the given rotation matrix values Example Playground https://playground.babylonjs.com/#L49EJ7#102</p><h4 id="type-parameters-12" tabindex="-1"><a class="header-anchor" href="#type-parameters-12" aria-hidden="true">#</a> Type parameters</h4>',6),qr=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Rr=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),vr={style:{"text-align":"left"}},wr=t("code",null,"Quaternion",-1),Er=t("h4",{id:"parameters-42",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-42","aria-hidden":"true"},"#"),e(" Parameters")],-1),Pr=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),jr=t("td",{style:{"text-align":"left"}},[t("code",null,"matrix")],-1),Dr={style:{"text-align":"left"}},Nr=t("code",null,"DeepImmutableObject",-1),Ir=t("code",null,"Matrix",-1),Lr=t("td",{style:{"text-align":"left"}},"defines the source matrix",-1),zr=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"defines the target quaternion")],-1),Jr=a('<h4 id="returns-60" tabindex="-1"><a class="header-anchor" href="#returns-60" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>result input</p><hr><h3 id="fromunitvectorstoref" tabindex="-1"><a class="header-anchor" href="#fromunitvectorstoref" aria-hidden="true">#</a> FromUnitVectorsToRef</h3><p>▸ <strong>FromUnitVectorsToRef</strong>&lt;<code>T</code>&gt;(<code>vecFrom</code>, <code>vecTo</code>, <code>result</code>, <code>epsilon?</code>): <code>T</code></p><p>Updates a quaternion so that it rotates vector vecFrom to vector vecTo Example Playground - https://playground.babylonjs.com/#L49EJ7#70</p><h4 id="type-parameters-13" tabindex="-1"><a class="header-anchor" href="#type-parameters-13" aria-hidden="true">#</a> Type parameters</h4>',8),Vr=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Ar=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Fr={style:{"text-align":"left"}},Or=t("code",null,"Quaternion",-1),kr=t("h4",{id:"parameters-43",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-43","aria-hidden":"true"},"#"),e(" Parameters")],-1),Cr=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Mr=t("td",{style:{"text-align":"left"}},[t("code",null,"vecFrom")],-1),Sr={style:{"text-align":"left"}},Hr=t("code",null,"DeepImmutableObject",-1),Gr=t("code",null,"Vector3",-1),Yr=t("td",{style:{"text-align":"left"}},"defines the direction vector from which to rotate",-1),Ur=t("td",{style:{"text-align":"left"}},[t("code",null,"vecTo")],-1),Br={style:{"text-align":"left"}},Zr=t("code",null,"DeepImmutableObject",-1),Xr=t("code",null,"Vector3",-1),Wr=t("td",{style:{"text-align":"left"}},"defines the direction vector to which to rotate",-1),Kr=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"the quaternion to store the result")],-1),$r=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"epsilon?")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},[e("defines the minimal dot value to define vecs as opposite. Default: "),t("code",null,"BABYLON.Epsilon")])],-1),ti=a('<h4 id="returns-61" tabindex="-1"><a class="header-anchor" href="#returns-61" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>the updated quaternion</p><hr><h3 id="hermite" tabindex="-1"><a class="header-anchor" href="#hermite" aria-hidden="true">#</a> Hermite</h3><p>▸ <strong>Hermite</strong>&lt;<code>T</code>&gt;(<code>value1</code>, <code>tangent1</code>, <code>value2</code>, <code>tangent2</code>, <code>amount</code>): <code>T</code></p><p>Interpolate between two quaternions using Hermite interpolation Example Playground https://playground.babylonjs.com/#L49EJ7#47</p><h4 id="type-parameters-14" tabindex="-1"><a class="header-anchor" href="#type-parameters-14" aria-hidden="true">#</a> Type parameters</h4>',8),ei=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),li=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),ni={style:{"text-align":"left"}},oi=t("code",null,"Quaternion",-1),ai=t("h4",{id:"parameters-44",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-44","aria-hidden":"true"},"#"),e(" Parameters")],-1),si=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),di=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"value1")]),t("td",{style:{"text-align":"left"}},[t("code",null,"DeepImmutable"),e("<"),t("code",null,"T"),e(">")]),t("td",{style:{"text-align":"left"}},"defines first quaternion")],-1),ri=t("td",{style:{"text-align":"left"}},[t("code",null,"tangent1")],-1),ii={style:{"text-align":"left"}},hi=t("code",null,"DeepImmutableObject",-1),ci=t("code",null,"Quaternion",-1),ui=t("td",{style:{"text-align":"left"}},"defines the incoming tangent",-1),_i=t("td",{style:{"text-align":"left"}},[t("code",null,"value2")],-1),fi={style:{"text-align":"left"}},pi=t("code",null,"DeepImmutableObject",-1),yi=t("code",null,"Quaternion",-1),mi=t("td",{style:{"text-align":"left"}},"defines second quaternion",-1),gi=t("td",{style:{"text-align":"left"}},[t("code",null,"tangent2")],-1),xi={style:{"text-align":"left"}},bi=t("code",null,"DeepImmutableObject",-1),Qi=t("code",null,"Quaternion",-1),Ti=t("td",{style:{"text-align":"left"}},"defines the outgoing tangent",-1),qi=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"amount")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"defines the target quaternion")],-1),Ri=a('<h4 id="returns-62" tabindex="-1"><a class="header-anchor" href="#returns-62" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>the new interpolated quaternion</p><p><strong><code>See</code></strong></p><p>https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves#hermite-quaternion-spline</p><hr><h3 id="hermite1stderivative" tabindex="-1"><a class="header-anchor" href="#hermite1stderivative" aria-hidden="true">#</a> Hermite1stDerivative</h3><p>▸ <strong>Hermite1stDerivative</strong>&lt;<code>T</code>&gt;(<code>value1</code>, <code>tangent1</code>, <code>value2</code>, <code>tangent2</code>, <code>time</code>): <code>T</code></p><p>Returns a new Quaternion which is the 1st derivative of the Hermite spline defined by the quaternions &quot;value1&quot;, &quot;value2&quot;, &quot;tangent1&quot;, &quot;tangent2&quot;. Example Playground https://playground.babylonjs.com/#L49EJ7#48</p><h4 id="type-parameters-15" tabindex="-1"><a class="header-anchor" href="#type-parameters-15" aria-hidden="true">#</a> Type parameters</h4>',10),vi=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),wi=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Ei={style:{"text-align":"left"}},Pi=t("code",null,"Quaternion",-1),ji=t("h4",{id:"parameters-45",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-45","aria-hidden":"true"},"#"),e(" Parameters")],-1),Di=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Ni=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"value1")]),t("td",{style:{"text-align":"left"}},[t("code",null,"DeepImmutable"),e("<"),t("code",null,"T"),e(">")]),t("td",{style:{"text-align":"left"}},"defines the first control point")],-1),Ii=t("td",{style:{"text-align":"left"}},[t("code",null,"tangent1")],-1),Li={style:{"text-align":"left"}},zi=t("code",null,"DeepImmutableObject",-1),Ji=t("code",null,"Quaternion",-1),Vi=t("td",{style:{"text-align":"left"}},"defines the first tangent",-1),Ai=t("td",{style:{"text-align":"left"}},[t("code",null,"value2")],-1),Fi={style:{"text-align":"left"}},Oi=t("code",null,"DeepImmutableObject",-1),ki=t("code",null,"Quaternion",-1),Ci=t("td",{style:{"text-align":"left"}},"defines the second control point",-1),Mi=t("td",{style:{"text-align":"left"}},[t("code",null,"tangent2")],-1),Si={style:{"text-align":"left"}},Hi=t("code",null,"DeepImmutableObject",-1),Gi=t("code",null,"Quaternion",-1),Yi=t("td",{style:{"text-align":"left"}},"defines the second tangent",-1),Ui=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"time")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"define where the derivative must be done")],-1),Bi=a('<h4 id="returns-63" tabindex="-1"><a class="header-anchor" href="#returns-63" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>1st derivative</p><hr><h3 id="hermite1stderivativetoref" tabindex="-1"><a class="header-anchor" href="#hermite1stderivativetoref" aria-hidden="true">#</a> Hermite1stDerivativeToRef</h3><p>▸ <strong>Hermite1stDerivativeToRef</strong>&lt;<code>T</code>&gt;(<code>value1</code>, <code>tangent1</code>, <code>value2</code>, <code>tangent2</code>, <code>time</code>, <code>result</code>): <code>T</code></p><p>Update a Quaternion with the 1st derivative of the Hermite spline defined by the quaternions &quot;value1&quot;, &quot;value2&quot;, &quot;tangent1&quot;, &quot;tangent2&quot;. Example Playground https://playground.babylonjs.com/#L49EJ7#49</p><h4 id="type-parameters-16" tabindex="-1"><a class="header-anchor" href="#type-parameters-16" aria-hidden="true">#</a> Type parameters</h4>',8),Zi=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Xi=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Wi={style:{"text-align":"left"}},Ki=t("code",null,"Quaternion",-1),$i=t("h4",{id:"parameters-46",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-46","aria-hidden":"true"},"#"),e(" Parameters")],-1),th=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),eh=t("td",{style:{"text-align":"left"}},[t("code",null,"value1")],-1),lh={style:{"text-align":"left"}},nh=t("code",null,"DeepImmutableObject",-1),oh=t("code",null,"Quaternion",-1),ah=t("td",{style:{"text-align":"left"}},"defines the first control point",-1),sh=t("td",{style:{"text-align":"left"}},[t("code",null,"tangent1")],-1),dh={style:{"text-align":"left"}},rh=t("code",null,"DeepImmutableObject",-1),ih=t("code",null,"Quaternion",-1),hh=t("td",{style:{"text-align":"left"}},"defines the first tangent",-1),ch=t("td",{style:{"text-align":"left"}},[t("code",null,"value2")],-1),uh={style:{"text-align":"left"}},_h=t("code",null,"DeepImmutableObject",-1),fh=t("code",null,"Quaternion",-1),ph=t("td",{style:{"text-align":"left"}},"defines the second control point",-1),yh=t("td",{style:{"text-align":"left"}},[t("code",null,"tangent2")],-1),mh={style:{"text-align":"left"}},gh=t("code",null,"DeepImmutableObject",-1),xh=t("code",null,"Quaternion",-1),bh=t("td",{style:{"text-align":"left"}},"defines the second tangent",-1),Qh=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"time")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"define where the derivative must be done")],-1),Th=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"define where to store the derivative")],-1),qh=t("h4",{id:"returns-64",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-64","aria-hidden":"true"},"#"),e(" Returns")],-1),Rh=t("p",null,[t("code",null,"T")],-1),vh=t("p",null,"result input",-1),wh=t("hr",null,null,-1),Eh=t("h3",{id:"identity",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#identity","aria-hidden":"true"},"#"),e(" Identity")],-1),Ph=t("strong",null,"Identity",-1),jh=t("code",null,"Quaternion",-1),Dh=t("p",null,"Creates an identity quaternion",-1),Nh=t("h4",{id:"returns-65",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-65","aria-hidden":"true"},"#"),e(" Returns")],-1),Ih=t("code",null,"Quaternion",-1),Lh=a('<p>the identity quaternion</p><hr><h3 id="inverse" tabindex="-1"><a class="header-anchor" href="#inverse" aria-hidden="true">#</a> Inverse</h3><p>▸ <strong>Inverse</strong>&lt;<code>T</code>&gt;(<code>q</code>): <code>T</code></p><p>Inverse a given quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#103</p><h4 id="type-parameters-17" tabindex="-1"><a class="header-anchor" href="#type-parameters-17" aria-hidden="true">#</a> Type parameters</h4>',6),zh=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Jh=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Vh={style:{"text-align":"left"}},Ah=t("code",null,"Quaternion",-1),Fh=a('<h4 id="parameters-47" tabindex="-1"><a class="header-anchor" href="#parameters-47" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>q</code></td><td style="text-align:left;"><code>DeepImmutable</code>&lt;<code>T</code>&gt;</td><td style="text-align:left;">defines the source quaternion</td></tr></tbody></table><h4 id="returns-66" tabindex="-1"><a class="header-anchor" href="#returns-66" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>a new quaternion as the inverted current quaternion</p><hr><h3 id="inversetoref" tabindex="-1"><a class="header-anchor" href="#inversetoref" aria-hidden="true">#</a> InverseToRef</h3><p>▸ <strong>InverseToRef</strong>&lt;<code>T</code>&gt;(<code>q</code>, <code>result</code>): <code>T</code></p><p>Inverse a given quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#104</p><h4 id="type-parameters-18" tabindex="-1"><a class="header-anchor" href="#type-parameters-18" aria-hidden="true">#</a> Type parameters</h4>',10),Oh=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),kh=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Ch={style:{"text-align":"left"}},Mh=t("code",null,"Quaternion",-1),Sh=t("h4",{id:"parameters-48",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-48","aria-hidden":"true"},"#"),e(" Parameters")],-1),Hh=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Gh=t("td",{style:{"text-align":"left"}},[t("code",null,"q")],-1),Yh={style:{"text-align":"left"}},Uh=t("code",null,"Quaternion",-1),Bh=t("td",{style:{"text-align":"left"}},"defines the source quaternion",-1),Zh=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"the quaternion the result will be stored in")],-1),Xh=a('<h4 id="returns-67" tabindex="-1"><a class="header-anchor" href="#returns-67" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>the result quaternion</p><hr><h3 id="isidentity" tabindex="-1"><a class="header-anchor" href="#isidentity" aria-hidden="true">#</a> IsIdentity</h3><p>▸ <strong>IsIdentity</strong>(<code>quaternion</code>): <code>boolean</code></p><p>Gets a boolean indicating if the given quaternion is identity</p><h4 id="parameters-49" tabindex="-1"><a class="header-anchor" href="#parameters-49" aria-hidden="true">#</a> Parameters</h4>',8),Wh=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Kh=t("td",{style:{"text-align":"left"}},[t("code",null,"quaternion")],-1),$h={style:{"text-align":"left"}},tc=t("code",null,"DeepImmutableObject",-1),ec=t("code",null,"Quaternion",-1),lc=t("td",{style:{"text-align":"left"}},"defines the quaternion to check",-1),nc=t("h4",{id:"returns-68",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-68","aria-hidden":"true"},"#"),e(" Returns")],-1),oc=t("p",null,[t("code",null,"boolean")],-1),ac=t("p",null,"true if the quaternion is identity",-1),sc=t("hr",null,null,-1),dc=t("h3",{id:"normalize-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#normalize-1","aria-hidden":"true"},"#"),e(" Normalize")],-1),rc=t("strong",null,"Normalize",-1),ic=t("code",null,"quat",-1),hc=t("code",null,"Quaternion",-1),cc=t("p",null,"Returns a new Quaternion as the normalization of the given Quaternion",-1),uc=t("h4",{id:"parameters-50",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-50","aria-hidden":"true"},"#"),e(" Parameters")],-1),_c=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),fc=t("td",{style:{"text-align":"left"}},[t("code",null,"quat")],-1),pc={style:{"text-align":"left"}},yc=t("code",null,"DeepImmutableObject",-1),mc=t("code",null,"Quaternion",-1),gc=t("td",{style:{"text-align":"left"}},"defines the Quaternion to normalize",-1),xc=t("h4",{id:"returns-69",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-69","aria-hidden":"true"},"#"),e(" Returns")],-1),bc=t("code",null,"Quaternion",-1),Qc=a('<p>the new Quaternion</p><hr><h3 id="normalizetoref-1" tabindex="-1"><a class="header-anchor" href="#normalizetoref-1" aria-hidden="true">#</a> NormalizeToRef</h3><p>▸ <strong>NormalizeToRef</strong>&lt;<code>T</code>&gt;(<code>quat</code>, <code>result</code>): <code>T</code></p><p>Sets the given Quaternion &quot;result&quot; with the normalization of the given first Quaternion</p><h4 id="type-parameters-19" tabindex="-1"><a class="header-anchor" href="#type-parameters-19" aria-hidden="true">#</a> Type parameters</h4>',6),Tc=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),qc=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Rc={style:{"text-align":"left"}},vc=t("code",null,"Quaternion",-1),wc=t("h4",{id:"parameters-51",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-51","aria-hidden":"true"},"#"),e(" Parameters")],-1),Ec=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Pc=t("td",{style:{"text-align":"left"}},[t("code",null,"quat")],-1),jc={style:{"text-align":"left"}},Dc=t("code",null,"DeepImmutableObject",-1),Nc=t("code",null,"Quaternion",-1),Ic=t("td",{style:{"text-align":"left"}},"defines the Quaternion to normalize",-1),Lc=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"defines the Quaternion where to store the result")],-1),zc=t("h4",{id:"returns-70",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-70","aria-hidden":"true"},"#"),e(" Returns")],-1),Jc=t("p",null,[t("code",null,"T")],-1),Vc=t("p",null,"result input",-1),Ac=t("hr",null,null,-1),Fc=t("h3",{id:"rotationalphabetagamma",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#rotationalphabetagamma","aria-hidden":"true"},"#"),e(" RotationAlphaBetaGamma")],-1),Oc=t("strong",null,"RotationAlphaBetaGamma",-1),kc=t("code",null,"alpha",-1),Cc=t("code",null,"beta",-1),Mc=t("code",null,"gamma",-1),Sc=t("code",null,"Quaternion",-1),Hc=a('<p>Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation Example Playground https://playground.babylonjs.com/#L49EJ7#68</p><h4 id="parameters-52" tabindex="-1"><a class="header-anchor" href="#parameters-52" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>alpha</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around first axis</td></tr><tr><td style="text-align:left;"><code>beta</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around second axis</td></tr><tr><td style="text-align:left;"><code>gamma</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around third axis</td></tr></tbody></table><h4 id="returns-71" tabindex="-1"><a class="header-anchor" href="#returns-71" aria-hidden="true">#</a> Returns</h4>',4),Gc=t("code",null,"Quaternion",-1),Yc=a('<p>the new quaternion</p><hr><h3 id="rotationalphabetagammatoref" tabindex="-1"><a class="header-anchor" href="#rotationalphabetagammatoref" aria-hidden="true">#</a> RotationAlphaBetaGammaToRef</h3><p>▸ <strong>RotationAlphaBetaGammaToRef</strong>&lt;<code>T</code>&gt;(<code>alpha</code>, <code>beta</code>, <code>gamma</code>, <code>result</code>): <code>T</code></p><p>Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#69</p><h4 id="type-parameters-20" tabindex="-1"><a class="header-anchor" href="#type-parameters-20" aria-hidden="true">#</a> Type parameters</h4>',6),Uc=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Bc=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),Zc={style:{"text-align":"left"}},Xc=t("code",null,"Quaternion",-1),Wc=a('<h4 id="parameters-53" tabindex="-1"><a class="header-anchor" href="#parameters-53" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>alpha</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around first axis</td></tr><tr><td style="text-align:left;"><code>beta</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around second axis</td></tr><tr><td style="text-align:left;"><code>gamma</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around third axis</td></tr><tr><td style="text-align:left;"><code>result</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">defines the target quaternion</td></tr></tbody></table><h4 id="returns-72" tabindex="-1"><a class="header-anchor" href="#returns-72" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>result input</p><hr><h3 id="rotationaxis" tabindex="-1"><a class="header-anchor" href="#rotationaxis" aria-hidden="true">#</a> RotationAxis</h3>',7),Kc=t("strong",null,"RotationAxis",-1),$c=t("code",null,"axis",-1),tu=t("code",null,"angle",-1),eu=t("code",null,"Quaternion",-1),lu=t("p",null,"Creates a quaternion from a rotation around an axis Example Playground https://playground.babylonjs.com/#L49EJ7#72",-1),nu=t("h4",{id:"parameters-54",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-54","aria-hidden":"true"},"#"),e(" Parameters")],-1),ou=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),au=t("td",{style:{"text-align":"left"}},[t("code",null,"axis")],-1),su={style:{"text-align":"left"}},du=t("code",null,"DeepImmutableObject",-1),ru=t("code",null,"Vector3",-1),iu=t("td",{style:{"text-align":"left"}},"defines the axis to use",-1),hu=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"angle")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"defines the angle to use")],-1),cu=t("h4",{id:"returns-73",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-73","aria-hidden":"true"},"#"),e(" Returns")],-1),uu=t("code",null,"Quaternion",-1),_u=a('<p>a new quaternion created from the given axis (Vector3) and angle in radians (float)</p><hr><h3 id="rotationaxistoref" tabindex="-1"><a class="header-anchor" href="#rotationaxistoref" aria-hidden="true">#</a> RotationAxisToRef</h3><p>▸ <strong>RotationAxisToRef</strong>&lt;<code>T</code>&gt;(<code>axis</code>, <code>angle</code>, <code>result</code>): <code>T</code></p><p>Creates a rotation around an axis and stores it into the given quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#73</p><h4 id="type-parameters-21" tabindex="-1"><a class="header-anchor" href="#type-parameters-21" aria-hidden="true">#</a> Type parameters</h4>',6),fu=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),pu=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),yu={style:{"text-align":"left"}},mu=t("code",null,"Quaternion",-1),gu=t("h4",{id:"parameters-55",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-55","aria-hidden":"true"},"#"),e(" Parameters")],-1),xu=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),bu=t("td",{style:{"text-align":"left"}},[t("code",null,"axis")],-1),Qu={style:{"text-align":"left"}},Tu=t("code",null,"DeepImmutableObject",-1),qu=t("code",null,"Vector3",-1),Ru=t("td",{style:{"text-align":"left"}},"defines the axis to use",-1),vu=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"angle")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"defines the angle to use")],-1),wu=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"defines the target quaternion")],-1),Eu=t("h4",{id:"returns-74",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-74","aria-hidden":"true"},"#"),e(" Returns")],-1),Pu=t("p",null,[t("code",null,"T")],-1),ju=t("p",null,"the target quaternion",-1),Du=t("hr",null,null,-1),Nu=t("h3",{id:"rotationquaternionfromaxis",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#rotationquaternionfromaxis","aria-hidden":"true"},"#"),e(" RotationQuaternionFromAxis")],-1),Iu=t("strong",null,"RotationQuaternionFromAxis",-1),Lu=t("code",null,"axis1",-1),zu=t("code",null,"axis2",-1),Ju=t("code",null,"axis3",-1),Vu=t("code",null,"Quaternion",-1),Au=t("p",null,"Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) Example Playground https://playground.babylonjs.com/#L49EJ7#75",-1),Fu=t("h4",{id:"parameters-56",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-56","aria-hidden":"true"},"#"),e(" Parameters")],-1),Ou=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),ku=t("td",{style:{"text-align":"left"}},[t("code",null,"axis1")],-1),Cu={style:{"text-align":"left"}},Mu=t("code",null,"DeepImmutableObject",-1),Su=t("code",null,"Vector3",-1),Hu=t("td",{style:{"text-align":"left"}},"defines the first axis",-1),Gu=t("td",{style:{"text-align":"left"}},[t("code",null,"axis2")],-1),Yu={style:{"text-align":"left"}},Uu=t("code",null,"DeepImmutableObject",-1),Bu=t("code",null,"Vector3",-1),Zu=t("td",{style:{"text-align":"left"}},"defines the second axis",-1),Xu=t("td",{style:{"text-align":"left"}},[t("code",null,"axis3")],-1),Wu={style:{"text-align":"left"}},Ku=t("code",null,"DeepImmutableObject",-1),$u=t("code",null,"Vector3",-1),t_=t("td",{style:{"text-align":"left"}},"defines the third axis",-1),e_=t("h4",{id:"returns-75",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-75","aria-hidden":"true"},"#"),e(" Returns")],-1),l_=t("code",null,"Quaternion",-1),n_=a('<p>the new quaternion</p><hr><h3 id="rotationquaternionfromaxistoref" tabindex="-1"><a class="header-anchor" href="#rotationquaternionfromaxistoref" aria-hidden="true">#</a> RotationQuaternionFromAxisToRef</h3><p>▸ <strong>RotationQuaternionFromAxisToRef</strong>&lt;<code>T</code>&gt;(<code>axis1</code>, <code>axis2</code>, <code>axis3</code>, <code>ref</code>): <code>T</code></p><p>Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#76</p><h4 id="type-parameters-22" tabindex="-1"><a class="header-anchor" href="#type-parameters-22" aria-hidden="true">#</a> Type parameters</h4>',6),o_=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),a_=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),s_={style:{"text-align":"left"}},d_=t("code",null,"Quaternion",-1),r_=t("h4",{id:"parameters-57",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-57","aria-hidden":"true"},"#"),e(" Parameters")],-1),i_=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),h_=t("td",{style:{"text-align":"left"}},[t("code",null,"axis1")],-1),c_={style:{"text-align":"left"}},u_=t("code",null,"DeepImmutableObject",-1),__=t("code",null,"Vector3",-1),f_=t("td",{style:{"text-align":"left"}},"defines the first axis",-1),p_=t("td",{style:{"text-align":"left"}},[t("code",null,"axis2")],-1),y_={style:{"text-align":"left"}},m_=t("code",null,"DeepImmutableObject",-1),g_=t("code",null,"Vector3",-1),x_=t("td",{style:{"text-align":"left"}},"defines the second axis",-1),b_=t("td",{style:{"text-align":"left"}},[t("code",null,"axis3")],-1),Q_={style:{"text-align":"left"}},T_=t("code",null,"DeepImmutableObject",-1),q_=t("code",null,"Vector3",-1),R_=t("td",{style:{"text-align":"left"}},"defines the third axis",-1),v_=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"ref")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"defines the target quaternion")],-1),w_=t("h4",{id:"returns-76",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-76","aria-hidden":"true"},"#"),e(" Returns")],-1),E_=t("p",null,[t("code",null,"T")],-1),P_=t("p",null,"result input",-1),j_=t("hr",null,null,-1),D_=t("h3",{id:"rotationyawpitchroll",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#rotationyawpitchroll","aria-hidden":"true"},"#"),e(" RotationYawPitchRoll")],-1),N_=t("strong",null,"RotationYawPitchRoll",-1),I_=t("code",null,"yaw",-1),L_=t("code",null,"pitch",-1),z_=t("code",null,"roll",-1),J_=t("code",null,"Quaternion",-1),V_=a('<p>Creates a new quaternion from the given Euler float angles (y, x, z) Example Playground https://playground.babylonjs.com/#L49EJ7#77</p><h4 id="parameters-58" tabindex="-1"><a class="header-anchor" href="#parameters-58" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>yaw</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around Y axis</td></tr><tr><td style="text-align:left;"><code>pitch</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around X axis</td></tr><tr><td style="text-align:left;"><code>roll</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around Z axis</td></tr></tbody></table><h4 id="returns-77" tabindex="-1"><a class="header-anchor" href="#returns-77" aria-hidden="true">#</a> Returns</h4>',4),A_=t("code",null,"Quaternion",-1),F_=a('<p>the new quaternion</p><hr><h3 id="rotationyawpitchrolltoref" tabindex="-1"><a class="header-anchor" href="#rotationyawpitchrolltoref" aria-hidden="true">#</a> RotationYawPitchRollToRef</h3><p>▸ <strong>RotationYawPitchRollToRef</strong>&lt;<code>T</code>&gt;(<code>yaw</code>, <code>pitch</code>, <code>roll</code>, <code>result</code>): <code>T</code></p><p>Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#78</p><h4 id="type-parameters-23" tabindex="-1"><a class="header-anchor" href="#type-parameters-23" aria-hidden="true">#</a> Type parameters</h4>',6),O_=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),k_=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),C_={style:{"text-align":"left"}},M_=t("code",null,"Quaternion",-1),S_=a('<h4 id="parameters-59" tabindex="-1"><a class="header-anchor" href="#parameters-59" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>yaw</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around Y axis</td></tr><tr><td style="text-align:left;"><code>pitch</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around X axis</td></tr><tr><td style="text-align:left;"><code>roll</code></td><td style="text-align:left;"><code>number</code></td><td style="text-align:left;">defines the rotation around Z axis</td></tr><tr><td style="text-align:left;"><code>result</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">defines the target quaternion</td></tr></tbody></table><h4 id="returns-78" tabindex="-1"><a class="header-anchor" href="#returns-78" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>result input</p><hr><h3 id="slerp" tabindex="-1"><a class="header-anchor" href="#slerp" aria-hidden="true">#</a> Slerp</h3>',7),H_=t("strong",null,"Slerp",-1),G_=t("code",null,"left",-1),Y_=t("code",null,"right",-1),U_=t("code",null,"amount",-1),B_=t("code",null,"Quaternion",-1),Z_=t("p",null,"Interpolates between two quaternions Example Playground https://playground.babylonjs.com/#L49EJ7#79",-1),X_=t("h4",{id:"parameters-60",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-60","aria-hidden":"true"},"#"),e(" Parameters")],-1),W_=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),K_=t("td",{style:{"text-align":"left"}},[t("code",null,"left")],-1),$_={style:{"text-align":"left"}},t1=t("code",null,"DeepImmutableObject",-1),e1=t("code",null,"Quaternion",-1),l1=t("td",{style:{"text-align":"left"}},"defines first quaternion",-1),n1=t("td",{style:{"text-align":"left"}},[t("code",null,"right")],-1),o1={style:{"text-align":"left"}},a1=t("code",null,"DeepImmutableObject",-1),s1=t("code",null,"Quaternion",-1),d1=t("td",{style:{"text-align":"left"}},"defines second quaternion",-1),r1=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"amount")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"defines the gradient to use")],-1),i1=t("h4",{id:"returns-79",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-79","aria-hidden":"true"},"#"),e(" Returns")],-1),h1=t("code",null,"Quaternion",-1),c1=a('<p>the new interpolated quaternion</p><hr><h3 id="slerptoref" tabindex="-1"><a class="header-anchor" href="#slerptoref" aria-hidden="true">#</a> SlerpToRef</h3><p>▸ <strong>SlerpToRef</strong>&lt;<code>T</code>&gt;(<code>left</code>, <code>right</code>, <code>amount</code>, <code>result</code>): <code>T</code></p><p>Interpolates between two quaternions and stores it into a target quaternion Example Playground https://playground.babylonjs.com/#L49EJ7#92</p><h4 id="type-parameters-24" tabindex="-1"><a class="header-anchor" href="#type-parameters-24" aria-hidden="true">#</a> Type parameters</h4>',6),u1=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),_1=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),f1={style:{"text-align":"left"}},p1=t("code",null,"Quaternion",-1),y1=t("h4",{id:"parameters-61",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-61","aria-hidden":"true"},"#"),e(" Parameters")],-1),m1=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),g1=t("td",{style:{"text-align":"left"}},[t("code",null,"left")],-1),x1={style:{"text-align":"left"}},b1=t("code",null,"DeepImmutableObject",-1),Q1=t("code",null,"Quaternion",-1),T1=t("td",{style:{"text-align":"left"}},"defines first quaternion",-1),q1=t("td",{style:{"text-align":"left"}},[t("code",null,"right")],-1),R1={style:{"text-align":"left"}},v1=t("code",null,"DeepImmutableObject",-1),w1=t("code",null,"Quaternion",-1),E1=t("td",{style:{"text-align":"left"}},"defines second quaternion",-1),P1=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"amount")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"defines the gradient to use")],-1),j1=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"defines the target quaternion")],-1),D1=a('<h4 id="returns-80" tabindex="-1"><a class="header-anchor" href="#returns-80" aria-hidden="true">#</a> Returns</h4><p><code>T</code></p><p>result input</p><hr><h3 id="smoothtoref" tabindex="-1"><a class="header-anchor" href="#smoothtoref" aria-hidden="true">#</a> SmoothToRef</h3><p>▸ <strong>SmoothToRef</strong>&lt;<code>T</code>&gt;(<code>source</code>, <code>goal</code>, <code>deltaTime</code>, <code>lerpTime</code>, <code>result</code>): <code>T</code></p><p>Smooth interpolation between two quaternions using Slerp Example Playground https://playground.babylonjs.com/#L49EJ7#93</p><h4 id="type-parameters-25" tabindex="-1"><a class="header-anchor" href="#type-parameters-25" aria-hidden="true">#</a> Type parameters</h4>',8),N1=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),I1=t("td",{style:{"text-align":"left"}},[t("code",null,"T")],-1),L1={style:{"text-align":"left"}},z1=t("code",null,"Quaternion",-1),J1=t("h4",{id:"parameters-62",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#parameters-62","aria-hidden":"true"},"#"),e(" Parameters")],-1),V1=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),A1=t("td",{style:{"text-align":"left"}},[t("code",null,"source")],-1),F1={style:{"text-align":"left"}},O1=t("code",null,"Quaternion",-1),k1=t("td",{style:{"text-align":"left"}},"source quaternion",-1),C1=t("td",{style:{"text-align":"left"}},[t("code",null,"goal")],-1),M1={style:{"text-align":"left"}},S1=t("code",null,"Quaternion",-1),H1=t("td",{style:{"text-align":"left"}},"goal quaternion",-1),G1=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"deltaTime")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"current interpolation frame")],-1),Y1=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"lerpTime")]),t("td",{style:{"text-align":"left"}},[t("code",null,"number")]),t("td",{style:{"text-align":"left"}},"total interpolation time")],-1),U1=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"result")]),t("td",{style:{"text-align":"left"}},[t("code",null,"T")]),t("td",{style:{"text-align":"left"}},"the smoothed quaternion")],-1),B1=t("h4",{id:"returns-81",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-81","aria-hidden":"true"},"#"),e(" Returns")],-1),Z1=t("p",null,[t("code",null,"T")],-1),X1=t("hr",null,null,-1),W1=t("h3",{id:"zero",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#zero","aria-hidden":"true"},"#"),e(" Zero")],-1),K1=t("strong",null,"Zero",-1),$1=t("code",null,"Quaternion",-1),tf=t("p",null,"Creates an empty quaternion",-1),ef=t("h4",{id:"returns-82",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#returns-82","aria-hidden":"true"},"#"),e(" Returns")],-1),lf=t("code",null,"Quaternion",-1),nf=t("p",null,"a new quaternion set to (0.0, 0.0, 0.0)",-1);function of(af,sf){const l=d("RouterLink");return r(),i("div",null,[c,t("ul",null,[t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#constructor"},{default:o(()=>[e("constructor")]),_:1})])]),u,t("ul",null,[t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#w"},{default:o(()=>[e("w")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#x"},{default:o(()=>[e("x")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#y"},{default:o(()=>[e("y")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#z"},{default:o(()=>[e("z")]),_:1})])]),_,t("ul",null,[t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#add"},{default:o(()=>[e("add")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#addinplace"},{default:o(()=>[e("addInPlace")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#asarray"},{default:o(()=>[e("asArray")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#clone"},{default:o(()=>[e("clone")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#conjugate"},{default:o(()=>[e("conjugate")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#conjugateinplace"},{default:o(()=>[e("conjugateInPlace")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#conjugatetoref"},{default:o(()=>[e("conjugateToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#copyfrom"},{default:o(()=>[e("copyFrom")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#copyfromfloats"},{default:o(()=>[e("copyFromFloats")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#dot"},{default:o(()=>[e("dot")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#equals"},{default:o(()=>[e("equals")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#equalswithepsilon"},{default:o(()=>[e("equalsWithEpsilon")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromrotationmatrix"},{default:o(()=>[e("fromRotationMatrix")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#getclassname"},{default:o(()=>[e("getClassName")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#gethashcode"},{default:o(()=>[e("getHashCode")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#invert"},{default:o(()=>[e("invert")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#invertinplace"},{default:o(()=>[e("invertInPlace")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#length"},{default:o(()=>[e("length")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#lengthsquared"},{default:o(()=>[e("lengthSquared")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#multiply"},{default:o(()=>[e("multiply")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#multiplyinplace"},{default:o(()=>[e("multiplyInPlace")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#multiplytoref"},{default:o(()=>[e("multiplyToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#normalize"},{default:o(()=>[e("normalize")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#normalizefromlength"},{default:o(()=>[e("normalizeFromLength")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#normalizetonew"},{default:o(()=>[e("normalizeToNew")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#normalizetoref"},{default:o(()=>[e("normalizeToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#scale"},{default:o(()=>[e("scale")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#scaleandaddtoref"},{default:o(()=>[e("scaleAndAddToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#scaleinplace"},{default:o(()=>[e("scaleInPlace")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#scaletoref"},{default:o(()=>[e("scaleToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#set"},{default:o(()=>[e("set")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#subtract"},{default:o(()=>[e("subtract")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#subtractinplace"},{default:o(()=>[e("subtractInPlace")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#toarray"},{default:o(()=>[e("toArray")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#toeulerangles"},{default:o(()=>[e("toEulerAngles")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#toeuleranglestoref"},{default:o(()=>[e("toEulerAnglesToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#torotationmatrix"},{default:o(()=>[e("toRotationMatrix")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#tostring"},{default:o(()=>[e("toString")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#areclose"},{default:o(()=>[e("AreClose")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#dot-1"},{default:o(()=>[e("Dot")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromarray"},{default:o(()=>[e("FromArray")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromarraytoref"},{default:o(()=>[e("FromArrayToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromeulerangles"},{default:o(()=>[e("FromEulerAngles")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromeuleranglestoref"},{default:o(()=>[e("FromEulerAnglesToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromeulervector"},{default:o(()=>[e("FromEulerVector")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromeulervectortoref"},{default:o(()=>[e("FromEulerVectorToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromlookdirectionlh"},{default:o(()=>[e("FromLookDirectionLH")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromlookdirectionlhtoref"},{default:o(()=>[e("FromLookDirectionLHToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromlookdirectionrh"},{default:o(()=>[e("FromLookDirectionRH")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromlookdirectionrhtoref"},{default:o(()=>[e("FromLookDirectionRHToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromrotationmatrix-1"},{default:o(()=>[e("FromRotationMatrix")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromrotationmatrixtoref"},{default:o(()=>[e("FromRotationMatrixToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#fromunitvectorstoref"},{default:o(()=>[e("FromUnitVectorsToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#hermite"},{default:o(()=>[e("Hermite")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#hermite1stderivative"},{default:o(()=>[e("Hermite1stDerivative")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#hermite1stderivativetoref"},{default:o(()=>[e("Hermite1stDerivativeToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#identity"},{default:o(()=>[e("Identity")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#inverse"},{default:o(()=>[e("Inverse")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#inversetoref"},{default:o(()=>[e("InverseToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#isidentity"},{default:o(()=>[e("IsIdentity")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#normalize-1"},{default:o(()=>[e("Normalize")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#normalizetoref-1"},{default:o(()=>[e("NormalizeToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#rotationalphabetagamma"},{default:o(()=>[e("RotationAlphaBetaGamma")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#rotationalphabetagammatoref"},{default:o(()=>[e("RotationAlphaBetaGammaToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#rotationaxis"},{default:o(()=>[e("RotationAxis")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#rotationaxistoref"},{default:o(()=>[e("RotationAxisToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#rotationquaternionfromaxis"},{default:o(()=>[e("RotationQuaternionFromAxis")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#rotationquaternionfromaxistoref"},{default:o(()=>[e("RotationQuaternionFromAxisToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#rotationyawpitchroll"},{default:o(()=>[e("RotationYawPitchRoll")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#rotationyawpitchrolltoref"},{default:o(()=>[e("RotationYawPitchRollToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#slerp"},{default:o(()=>[e("Slerp")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#slerptoref"},{default:o(()=>[e("SlerpToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#smoothtoref"},{default:o(()=>[e("SmoothToRef")]),_:1})]),t("li",null,[n(l,{to:"/docs/classes/Quaternion.html#zero"},{default:o(()=>[e("Zero")]),_:1})])]),f,p,t("p",null,[e("• "),y,e("("),m,e(", "),g,e(", "),x,e(", "),b,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Q]),_:1})]),T,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[q]),_:1})]),R,t("p",null,[e("▸ "),v,e("("),w,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[E]),_:1})]),P,j,t("table",null,[D,t("tbody",null,[t("tr",null,[N,t("td",I,[L,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[z]),_:1}),e(">")]),J])])]),V,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[A]),_:1})]),F,O,k,t("p",null,[e("▸ "),C,e("("),M,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[S]),_:1})]),H,G,t("table",null,[Y,t("tbody",null,[t("tr",null,[U,t("td",B,[Z,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[X]),_:1}),e(">")]),W])])]),K,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[$]),_:1})]),tt,t("p",null,[e("▸ "),et,e("(): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[lt]),_:1})]),nt,ot,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[at]),_:1})]),st,dt,rt,t("p",null,[e("▸ "),it,e("(): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ht]),_:1})]),ct,ut,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[_t]),_:1})]),ft,pt,yt,t("p",null,[e("▸ "),mt,e("(): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[gt]),_:1})]),xt,bt,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Qt]),_:1})]),Tt,t("table",null,[qt,t("tbody",null,[t("tr",null,[Rt,t("td",vt,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[wt]),_:1})])])])]),Et,t("p",null,[e("▸ "),Pt,e("("),jt,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Dt]),_:1})]),Nt,It,t("table",null,[Lt,t("tbody",null,[t("tr",null,[zt,t("td",Jt,[Vt,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[At]),_:1}),e(">")]),Ft])])]),Ot,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[kt]),_:1})]),Ct,Mt,St,t("p",null,[e("▸ "),Ht,e("("),Gt,e(", "),Yt,e(", "),Ut,e(", "),Bt,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Zt]),_:1})]),Xt,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Wt]),_:1})]),Kt,t("table",null,[$t,t("tbody",null,[t("tr",null,[te,t("td",ee,[le,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ne]),_:1}),e(">")]),oe])])]),ae,t("table",null,[se,t("tbody",null,[t("tr",null,[de,t("td",re,[ie,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[he]),_:1}),e(">")]),ce])])]),ue,t("table",null,[_e,t("tbody",null,[t("tr",null,[fe,t("td",pe,[ye,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[me]),_:1}),e(">")]),ge]),xe])]),be,Qe,Te,qe,Re,t("p",null,[e("▸ "),ve,e("("),we,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ee]),_:1})]),Pe,je,t("table",null,[De,t("tbody",null,[t("tr",null,[Ne,t("td",Ie,[Le,e("<"),n(l,{to:"/docs/classes/Matrix.html"},{default:o(()=>[ze]),_:1}),e(">")]),Je])])]),Ve,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ae]),_:1})]),Fe,t("p",null,[e("▸ "),Oe,e("(): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ke]),_:1})]),Ce,Me,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Se]),_:1})]),He,Ge,Ye,t("p",null,[e("▸ "),Ue,e("(): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Be]),_:1})]),Ze,Xe,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[We]),_:1})]),Ke,t("p",null,[e("▸ "),$e,e("("),tl,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[el]),_:1})]),ll,nl,t("table",null,[ol,t("tbody",null,[t("tr",null,[al,t("td",sl,[dl,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[rl]),_:1}),e(">")]),il])])]),hl,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[cl]),_:1})]),ul,_l,fl,t("p",null,[e("▸ "),pl,e("("),yl,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ml]),_:1})]),gl,xl,t("table",null,[bl,t("tbody",null,[t("tr",null,[Ql,t("td",Tl,[ql,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Rl]),_:1}),e(">")]),vl])])]),wl,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[El]),_:1})]),Pl,t("table",null,[jl,t("tbody",null,[t("tr",null,[Dl,t("td",Nl,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Il]),_:1})])])])]),Ll,t("table",null,[zl,t("tbody",null,[t("tr",null,[Jl,t("td",Vl,[Al,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Fl]),_:1}),e(">")]),Ol]),kl])]),Cl,Ml,Sl,Hl,Gl,t("p",null,[e("▸ "),Yl,e("(): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ul]),_:1})]),Bl,Zl,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Xl]),_:1})]),Wl,Kl,$l,t("p",null,[e("▸ "),tn,e("("),en,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ln]),_:1})]),nn,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[on]),_:1})]),an,sn,dn,t("p",null,[e("▸ "),rn,e("(): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[hn]),_:1})]),cn,un,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[_n]),_:1})]),fn,t("table",null,[pn,t("tbody",null,[t("tr",null,[yn,t("td",mn,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[gn]),_:1})])])])]),xn,t("p",null,[e("▸ "),bn,e("("),Qn,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Tn]),_:1})]),qn,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Rn]),_:1})]),vn,t("table",null,[wn,t("tbody",null,[t("tr",null,[En,t("td",Pn,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[jn]),_:1})])])])]),Dn,t("p",null,[e("▸ "),Nn,e("("),In,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ln]),_:1})]),zn,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Jn]),_:1})]),Vn,t("table",null,[An,t("tbody",null,[t("tr",null,[Fn,t("td",On,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[kn]),_:1})])])])]),Cn,t("p",null,[e("▸ "),Mn,e("("),Sn,e(", "),Hn,e(", "),Gn,e(", "),Yn,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Un]),_:1})]),Bn,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Zn]),_:1})]),Xn,Wn,Kn,t("p",null,[e("▸ "),$n,e("("),to,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[eo]),_:1})]),lo,no,t("table",null,[oo,t("tbody",null,[t("tr",null,[ao,t("td",so,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ro]),_:1})]),io])])]),ho,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[co]),_:1})]),uo,_o,fo,t("p",null,[e("▸ "),po,e("("),yo,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[mo]),_:1})]),go,xo,t("table",null,[bo,t("tbody",null,[t("tr",null,[Qo,t("td",To,[qo,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ro]),_:1}),e(">")]),vo])])]),wo,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Eo]),_:1})]),Po,jo,Do,t("p",null,[e("▸ "),No,e("("),Io,e(", "),Lo,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[zo]),_:1})]),Jo,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Vo]),_:1})]),Ao,Fo,Oo,t("p",null,[e("▸ "),ko,e("(): "),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Co]),_:1})]),Mo,So,t("p",null,[n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Ho]),_:1})]),Go,t("table",null,[Yo,t("tbody",null,[t("tr",null,[Uo,t("td",Bo,[e("extends "),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Zo]),_:1})])])])]),Xo,t("table",null,[Wo,t("tbody",null,[t("tr",null,[Ko,t("td",$o,[e("extends "),n(l,{to:"/docs/classes/Matrix.html"},{default:o(()=>[ta]),_:1})])])])]),ea,t("table",null,[la,t("tbody",null,[t("tr",null,[na,t("td",oa,[aa,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[sa]),_:1}),e(">")]),da]),t("tr",null,[ra,t("td",ia,[ha,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ca]),_:1}),e(">")]),ua]),_a])]),fa,t("table",null,[pa,t("tbody",null,[t("tr",null,[ya,t("td",ma,[ga,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[xa]),_:1}),e(">")]),ba]),t("tr",null,[Qa,t("td",Ta,[qa,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ra]),_:1}),e(">")]),va])])]),wa,Ea,Pa,ja,Da,t("p",null,[e("▸ "),Na,e("("),Ia,e(", "),La,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[za]),_:1})]),Ja,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Va]),_:1})]),Aa,t("table",null,[Fa,t("tbody",null,[t("tr",null,[Oa,t("td",ka,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ca]),_:1})])])])]),Ma,t("p",null,[e("▸ "),Sa,e("("),Ha,e(", "),Ga,e(", "),Ya,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ua]),_:1})]),Ba,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Za]),_:1})]),Xa,t("table",null,[Wa,t("tbody",null,[t("tr",null,[Ka,t("td",$a,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ts]),_:1})])])])]),es,t("p",null,[e("▸ "),ls,e("("),ns,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[os]),_:1})]),as,ss,t("table",null,[ds,t("tbody",null,[t("tr",null,[rs,t("td",is,[hs,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[cs]),_:1}),e(">")]),us])])]),_s,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[fs]),_:1})]),ps,t("table",null,[ys,t("tbody",null,[t("tr",null,[ms,t("td",gs,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[xs]),_:1})])])])]),bs,t("table",null,[Qs,t("tbody",null,[t("tr",null,[Ts,t("td",qs,[Rs,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[vs]),_:1}),e(">")]),ws]),Es])]),Ps,js,Ds,Ns,Is,t("p",null,[e("▸ "),Ls,e("("),zs,e(", "),Js,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Vs]),_:1})]),As,Fs,t("table",null,[Os,t("tbody",null,[t("tr",null,[ks,t("td",Cs,[Ms,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Ss]),_:1}),e(">")]),Hs]),t("tr",null,[Gs,t("td",Ys,[Us,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Bs]),_:1}),e(">")]),Zs])])]),Xs,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ws]),_:1})]),Ks,t("table",null,[$s,t("tbody",null,[t("tr",null,[td,t("td",ed,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ld]),_:1})])])])]),nd,t("table",null,[od,t("tbody",null,[t("tr",null,[ad,t("td",sd,[dd,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[rd]),_:1}),e(">")]),id]),t("tr",null,[hd,t("td",cd,[ud,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[_d]),_:1}),e(">")]),fd]),pd])]),yd,md,gd,xd,bd,t("p",null,[e("▸ "),Qd,e("("),Td,e(", "),qd,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Rd]),_:1})]),vd,wd,t("table",null,[Ed,t("tbody",null,[t("tr",null,[Pd,t("td",jd,[Dd,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Nd]),_:1}),e(">")]),Id]),t("tr",null,[Ld,t("td",zd,[Jd,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Vd]),_:1}),e(">")]),Ad])])]),Fd,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Od]),_:1})]),kd,t("table",null,[Cd,t("tbody",null,[t("tr",null,[Md,t("td",Sd,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Hd]),_:1})])])])]),Gd,t("table",null,[Yd,t("tbody",null,[t("tr",null,[Ud,t("td",Bd,[Zd,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Xd]),_:1}),e(">")]),Wd]),t("tr",null,[Kd,t("td",$d,[tr,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[er]),_:1}),e(">")]),lr]),nr])]),or,ar,sr,dr,rr,t("p",null,[e("▸ "),ir,e("("),hr,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[cr]),_:1})]),ur,_r,t("table",null,[fr,t("tbody",null,[t("tr",null,[pr,t("td",yr,[mr,e("<"),n(l,{to:"/docs/classes/Matrix.html"},{default:o(()=>[gr]),_:1}),e(">")]),xr])])]),br,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Qr]),_:1})]),Tr,t("table",null,[qr,t("tbody",null,[t("tr",null,[Rr,t("td",vr,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[wr]),_:1})])])])]),Er,t("table",null,[Pr,t("tbody",null,[t("tr",null,[jr,t("td",Dr,[Nr,e("<"),n(l,{to:"/docs/classes/Matrix.html"},{default:o(()=>[Ir]),_:1}),e(">")]),Lr]),zr])]),Jr,t("table",null,[Vr,t("tbody",null,[t("tr",null,[Ar,t("td",Fr,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Or]),_:1})])])])]),kr,t("table",null,[Cr,t("tbody",null,[t("tr",null,[Mr,t("td",Sr,[Hr,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Gr]),_:1}),e(">")]),Yr]),t("tr",null,[Ur,t("td",Br,[Zr,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Xr]),_:1}),e(">")]),Wr]),Kr,$r])]),ti,t("table",null,[ei,t("tbody",null,[t("tr",null,[li,t("td",ni,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[oi]),_:1})])])])]),ai,t("table",null,[si,t("tbody",null,[di,t("tr",null,[ri,t("td",ii,[hi,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ci]),_:1}),e(">")]),ui]),t("tr",null,[_i,t("td",fi,[pi,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[yi]),_:1}),e(">")]),mi]),t("tr",null,[gi,t("td",xi,[bi,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Qi]),_:1}),e(">")]),Ti]),qi])]),Ri,t("table",null,[vi,t("tbody",null,[t("tr",null,[wi,t("td",Ei,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Pi]),_:1})])])])]),ji,t("table",null,[Di,t("tbody",null,[Ni,t("tr",null,[Ii,t("td",Li,[zi,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ji]),_:1}),e(">")]),Vi]),t("tr",null,[Ai,t("td",Fi,[Oi,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ki]),_:1}),e(">")]),Ci]),t("tr",null,[Mi,t("td",Si,[Hi,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Gi]),_:1}),e(">")]),Yi]),Ui])]),Bi,t("table",null,[Zi,t("tbody",null,[t("tr",null,[Xi,t("td",Wi,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ki]),_:1})])])])]),$i,t("table",null,[th,t("tbody",null,[t("tr",null,[eh,t("td",lh,[nh,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[oh]),_:1}),e(">")]),ah]),t("tr",null,[sh,t("td",dh,[rh,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ih]),_:1}),e(">")]),hh]),t("tr",null,[ch,t("td",uh,[_h,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[fh]),_:1}),e(">")]),ph]),t("tr",null,[yh,t("td",mh,[gh,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[xh]),_:1}),e(">")]),bh]),Qh,Th])]),qh,Rh,vh,wh,Eh,t("p",null,[e("▸ "),Ph,e("(): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[jh]),_:1})]),Dh,Nh,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ih]),_:1})]),Lh,t("table",null,[zh,t("tbody",null,[t("tr",null,[Jh,t("td",Vh,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Ah]),_:1})])])])]),Fh,t("table",null,[Oh,t("tbody",null,[t("tr",null,[kh,t("td",Ch,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Mh]),_:1})])])])]),Sh,t("table",null,[Hh,t("tbody",null,[t("tr",null,[Gh,t("td",Yh,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Uh]),_:1})]),Bh]),Zh])]),Xh,t("table",null,[Wh,t("tbody",null,[t("tr",null,[Kh,t("td",$h,[tc,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[ec]),_:1}),e(">")]),lc])])]),nc,oc,ac,sc,dc,t("p",null,[e("▸ "),rc,e("("),ic,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[hc]),_:1})]),cc,uc,t("table",null,[_c,t("tbody",null,[t("tr",null,[fc,t("td",pc,[yc,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[mc]),_:1}),e(">")]),gc])])]),xc,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[bc]),_:1})]),Qc,t("table",null,[Tc,t("tbody",null,[t("tr",null,[qc,t("td",Rc,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[vc]),_:1})])])])]),wc,t("table",null,[Ec,t("tbody",null,[t("tr",null,[Pc,t("td",jc,[Dc,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Nc]),_:1}),e(">")]),Ic]),Lc])]),zc,Jc,Vc,Ac,Fc,t("p",null,[e("▸ "),Oc,e("("),kc,e(", "),Cc,e(", "),Mc,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Sc]),_:1})]),Hc,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Gc]),_:1})]),Yc,t("table",null,[Uc,t("tbody",null,[t("tr",null,[Bc,t("td",Zc,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Xc]),_:1})])])])]),Wc,t("p",null,[e("▸ "),Kc,e("("),$c,e(", "),tu,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[eu]),_:1})]),lu,nu,t("table",null,[ou,t("tbody",null,[t("tr",null,[au,t("td",su,[du,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[ru]),_:1}),e(">")]),iu]),hu])]),cu,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[uu]),_:1})]),_u,t("table",null,[fu,t("tbody",null,[t("tr",null,[pu,t("td",yu,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[mu]),_:1})])])])]),gu,t("table",null,[xu,t("tbody",null,[t("tr",null,[bu,t("td",Qu,[Tu,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[qu]),_:1}),e(">")]),Ru]),vu,wu])]),Eu,Pu,ju,Du,Nu,t("p",null,[e("▸ "),Iu,e("("),Lu,e(", "),zu,e(", "),Ju,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Vu]),_:1})]),Au,Fu,t("table",null,[Ou,t("tbody",null,[t("tr",null,[ku,t("td",Cu,[Mu,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Su]),_:1}),e(">")]),Hu]),t("tr",null,[Gu,t("td",Yu,[Uu,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[Bu]),_:1}),e(">")]),Zu]),t("tr",null,[Xu,t("td",Wu,[Ku,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[$u]),_:1}),e(">")]),t_])])]),e_,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[l_]),_:1})]),n_,t("table",null,[o_,t("tbody",null,[t("tr",null,[a_,t("td",s_,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[d_]),_:1})])])])]),r_,t("table",null,[i_,t("tbody",null,[t("tr",null,[h_,t("td",c_,[u_,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[__]),_:1}),e(">")]),f_]),t("tr",null,[p_,t("td",y_,[m_,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[g_]),_:1}),e(">")]),x_]),t("tr",null,[b_,t("td",Q_,[T_,e("<"),n(l,{to:"/docs/classes/Vector3.html"},{default:o(()=>[q_]),_:1}),e(">")]),R_]),v_])]),w_,E_,P_,j_,D_,t("p",null,[e("▸ "),N_,e("("),I_,e(", "),L_,e(", "),z_,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[J_]),_:1})]),V_,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[A_]),_:1})]),F_,t("table",null,[O_,t("tbody",null,[t("tr",null,[k_,t("td",C_,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[M_]),_:1})])])])]),S_,t("p",null,[e("▸ "),H_,e("("),G_,e(", "),Y_,e(", "),U_,e("): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[B_]),_:1})]),Z_,X_,t("table",null,[W_,t("tbody",null,[t("tr",null,[K_,t("td",$_,[t1,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[e1]),_:1}),e(">")]),l1]),t("tr",null,[n1,t("td",o1,[a1,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[s1]),_:1}),e(">")]),d1]),r1])]),i1,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[h1]),_:1})]),c1,t("table",null,[u1,t("tbody",null,[t("tr",null,[_1,t("td",f1,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[p1]),_:1})])])])]),y1,t("table",null,[m1,t("tbody",null,[t("tr",null,[g1,t("td",x1,[b1,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[Q1]),_:1}),e(">")]),T1]),t("tr",null,[q1,t("td",R1,[v1,e("<"),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[w1]),_:1}),e(">")]),E1]),P1,j1])]),D1,t("table",null,[N1,t("tbody",null,[t("tr",null,[I1,t("td",L1,[e("extends "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[z1]),_:1})])])])]),J1,t("table",null,[V1,t("tbody",null,[t("tr",null,[A1,t("td",F1,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[O1]),_:1})]),k1]),t("tr",null,[C1,t("td",M1,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[S1]),_:1})]),H1]),G1,Y1,U1])]),B1,Z1,X1,W1,t("p",null,[e("▸ "),K1,e("(): "),n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[$1]),_:1})]),tf,ef,t("p",null,[n(l,{to:"/docs/classes/Quaternion.html"},{default:o(()=>[lf]),_:1})]),nf])}const rf=s(h,[["render",of],["__file","Quaternion.html.vue"]]);export{rf as default};
